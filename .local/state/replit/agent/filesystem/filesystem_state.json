{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MeetingFlow - AI-Powered Meeting Transcription Platform\n\n## Overview\n\nMeetingFlow is a real-time meeting transcription platform that provides AI-powered live transcription with automatic action item extraction. The system is designed specifically for newsletter publishers and content creators, offering WebSocket-based streaming transcription, intelligent conversation analysis, and seamless integration with productivity tools.\n\nThe platform combines a React frontend with shadcn/ui components, an Express.js backend with WebSocket support, PostgreSQL database with Drizzle ORM, and OpenAI integration for natural language processing and conversation enhancement.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and hot module replacement\n- **UI Components**: shadcn/ui component library built on Radix UI primitives for accessibility and consistency\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query for server state management and custom hooks for WebSocket connections\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: Custom WebSocket client with automatic reconnection and connection state management\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for RESTful API endpoints\n- **Real-time Communication**: WebSocket server using 'ws' library for streaming transcription data\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **AI Integration**: OpenAI API integration for transcription processing and conversation enhancement\n- **Development**: In-memory storage fallback for development with interface-based storage abstraction\n\n### Database Design\n- **Users Table**: Authentication and user profile management with role-based access\n- **Meetings Table**: Meeting session tracking with status, duration, and metadata\n- **Transcriptions Table**: Real-time speech-to-text results with speaker identification and color coding\n- **Action Items Table**: Automatically extracted tasks with assignment and completion tracking\n- **Meeting Insights Table**: AI-generated summaries, sentiment analysis, and key topics\n\n### WebSocket Communication\n- **Connection Management**: Automatic reconnection with exponential backoff and connection state tracking\n- **Message Types**: Structured message protocol for transcriptions, action items, insights, and connection status\n- **Error Handling**: Comprehensive error handling with timeout management and graceful degradation\n- **Scalability**: Support for concurrent connections with per-meeting isolation\n\n### AI and Natural Language Processing\n- **OpenAI Integration**: GPT model integration for conversation processing and enhancement\n- **Brand-Specific Prompting**: Customized system prompts for newsletter publisher context and tone\n- **Conversation Memory**: Session-based context maintenance for coherent multi-turn interactions\n- **Action Item Extraction**: Intelligent parsing of meeting content to identify actionable tasks\n- **Sentiment Analysis**: Real-time mood and collaboration assessment\n\n## External Dependencies\n\n### Core Services\n- **OpenAI API**: GPT models for transcription enhancement, action item extraction, and conversation processing\n- **Neon Database**: Serverless PostgreSQL hosting for production data persistence\n- **WebSocket Protocol**: Real-time bidirectional communication for live transcription streaming\n\n### Development and Deployment\n- **Vite**: Frontend build tool with TypeScript support and hot module replacement\n- **Replit Integration**: Development environment with runtime error handling and cartographer support\n- **ESBuild**: Backend bundling for production deployment\n\n### UI and Design System\n- **Radix UI**: Headless component primitives for accessibility and keyboard navigation\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide Icons**: SVG icon library for consistent visual language\n- **Google Fonts**: Typography with Inter font family for readability\n\n### Productivity Integrations\n- **Notion**: Action item export capability for project management\n- **Trello**: Task board integration for workflow management\n- **Slack**: Team communication and notification system\n- **Email**: Summary distribution and follow-up communication\n\n### Form and Validation\n- **React Hook Form**: Form state management with validation\n- **Zod**: TypeScript-first schema validation for data integrity\n- **Hookform Resolvers**: Integration between form handling and validation schemas","size_bytes":4720},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { WebSocketManager } from \"./services/websocket\";\nimport { insertMeetingSchema, insertActionItemSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize WebSocket manager\n  const wsManager = new WebSocketManager(httpServer);\n\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ \n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      connections: wsManager.getActiveConnections(),\n      activeMeetings: wsManager.getActiveMeetings()\n    });\n  });\n\n  // User authentication endpoint\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      res.json({ \n        user: {\n          id: user.id,\n          username: user.username,\n          name: user.name,\n          role: user.role\n        }\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get user profile\n  app.get(\"/api/user/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        name: user.name,\n        role: user.role\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create new meeting\n  app.post(\"/api/meetings\", async (req, res) => {\n    try {\n      const validatedData = insertMeetingSchema.parse(req.body);\n      const meeting = await storage.createMeeting(validatedData);\n      res.json(meeting);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid meeting data\", errors: error.errors });\n      }\n      console.error(\"Create meeting error:\", error);\n      res.status(500).json({ message: \"Failed to create meeting\" });\n    }\n  });\n\n  // Get meeting details\n  app.get(\"/api/meetings/:id\", async (req, res) => {\n    try {\n      const meeting = await storage.getMeeting(req.params.id);\n      if (!meeting) {\n        return res.status(404).json({ message: \"Meeting not found\" });\n      }\n\n      const transcriptions = await storage.getTranscriptionsByMeeting(req.params.id);\n      const actionItems = await storage.getActionItemsByMeeting(req.params.id);\n      const insights = await storage.getMeetingInsight(req.params.id);\n\n      res.json({\n        meeting,\n        transcriptions,\n        actionItems,\n        insights\n      });\n    } catch (error) {\n      console.error(\"Get meeting error:\", error);\n      res.status(500).json({ message: \"Failed to retrieve meeting\" });\n    }\n  });\n\n  // Get meetings for user\n  app.get(\"/api/users/:userId/meetings\", async (req, res) => {\n    try {\n      const meetings = await storage.getMeetingsByUser(req.params.userId);\n      res.json(meetings);\n    } catch (error) {\n      console.error(\"Get user meetings error:\", error);\n      res.status(500).json({ message: \"Failed to retrieve meetings\" });\n    }\n  });\n\n  // Update meeting status\n  app.patch(\"/api/meetings/:id\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      const meeting = await storage.updateMeeting(req.params.id, { \n        status,\n        ...(status === \"completed\" ? { endTime: new Date() } : {})\n      });\n      \n      if (!meeting) {\n        return res.status(404).json({ message: \"Meeting not found\" });\n      }\n\n      res.json(meeting);\n    } catch (error) {\n      console.error(\"Update meeting error:\", error);\n      res.status(500).json({ message: \"Failed to update meeting\" });\n    }\n  });\n\n  // Get transcriptions for meeting\n  app.get(\"/api/meetings/:id/transcriptions\", async (req, res) => {\n    try {\n      const transcriptions = await storage.getTranscriptionsByMeeting(req.params.id);\n      res.json(transcriptions);\n    } catch (error) {\n      console.error(\"Get transcriptions error:\", error);\n      res.status(500).json({ message: \"Failed to retrieve transcriptions\" });\n    }\n  });\n\n  // Get action items for meeting\n  app.get(\"/api/meetings/:id/action-items\", async (req, res) => {\n    try {\n      const actionItems = await storage.getActionItemsByMeeting(req.params.id);\n      res.json(actionItems);\n    } catch (error) {\n      console.error(\"Get action items error:\", error);\n      res.status(500).json({ message: \"Failed to retrieve action items\" });\n    }\n  });\n\n  // Update action item\n  app.patch(\"/api/action-items/:id\", async (req, res) => {\n    try {\n      const actionItem = await storage.updateActionItem(req.params.id, req.body);\n      if (!actionItem) {\n        return res.status(404).json({ message: \"Action item not found\" });\n      }\n      res.json(actionItem);\n    } catch (error) {\n      console.error(\"Update action item error:\", error);\n      res.status(500).json({ message: \"Failed to update action item\" });\n    }\n  });\n\n  // Get meeting insights\n  app.get(\"/api/meetings/:id/insights\", async (req, res) => {\n    try {\n      const insights = await storage.getMeetingInsight(req.params.id);\n      if (!insights) {\n        return res.status(404).json({ message: \"Meeting insights not found\" });\n      }\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Get insights error:\", error);\n      res.status(500).json({ message: \"Failed to retrieve insights\" });\n    }\n  });\n\n  // Export endpoints for integrations\n  app.post(\"/api/meetings/:id/export\", async (req, res) => {\n    try {\n      const { platform } = req.body; // notion, trello, slack, email\n      const meeting = await storage.getMeeting(req.params.id);\n      \n      if (!meeting) {\n        return res.status(404).json({ message: \"Meeting not found\" });\n      }\n\n      const actionItems = await storage.getActionItemsByMeeting(req.params.id);\n      const insights = await storage.getMeetingInsight(req.params.id);\n\n      // Mock export functionality - in production, integrate with actual APIs\n      const exportData = {\n        meeting,\n        actionItems,\n        insights,\n        platform,\n        exportedAt: new Date().toISOString(),\n        status: \"success\"\n      };\n\n      res.json({ \n        message: `Successfully exported to ${platform}`,\n        data: exportData\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      res.status(500).json({ message: \"Failed to export meeting data\" });\n    }\n  });\n\n  // WebSocket connection stats\n  app.get(\"/api/stats/connections\", (req, res) => {\n    res.json({\n      activeConnections: wsManager.getActiveConnections(),\n      activeMeetings: wsManager.getActiveMeetings(),\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Graceful shutdown handler\n  process.on('SIGTERM', () => {\n    console.log('SIGTERM received, shutting down gracefully...');\n    wsManager.shutdown();\n    httpServer.close(() => {\n      console.log('HTTP server closed');\n      process.exit(0);\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":7604},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Meeting,\n  type InsertMeeting,\n  type Transcription,\n  type InsertTranscription,\n  type ActionItem,\n  type InsertActionItem,\n  type MeetingInsight,\n  type InsertMeetingInsight\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Meeting operations\n  getMeeting(id: string): Promise<Meeting | undefined>;\n  getMeetingsByUser(userId: string): Promise<Meeting[]>;\n  createMeeting(meeting: InsertMeeting): Promise<Meeting>;\n  updateMeeting(id: string, updates: Partial<Meeting>): Promise<Meeting | undefined>;\n\n  // Transcription operations\n  getTranscriptionsByMeeting(meetingId: string): Promise<Transcription[]>;\n  createTranscription(transcription: InsertTranscription): Promise<Transcription>;\n  updateTranscription(id: string, updates: Partial<Transcription>): Promise<Transcription | undefined>;\n\n  // Action item operations\n  getActionItemsByMeeting(meetingId: string): Promise<ActionItem[]>;\n  createActionItem(actionItem: InsertActionItem): Promise<ActionItem>;\n  updateActionItem(id: string, updates: Partial<ActionItem>): Promise<ActionItem | undefined>;\n\n  // Meeting insights operations\n  getMeetingInsight(meetingId: string): Promise<MeetingInsight | undefined>;\n  createMeetingInsight(insight: InsertMeetingInsight): Promise<MeetingInsight>;\n  updateMeetingInsight(meetingId: string, updates: Partial<MeetingInsight>): Promise<MeetingInsight | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private meetings: Map<string, Meeting>;\n  private transcriptions: Map<string, Transcription>;\n  private actionItems: Map<string, ActionItem>;\n  private meetingInsights: Map<string, MeetingInsight>;\n\n  constructor() {\n    this.users = new Map();\n    this.meetings = new Map();\n    this.transcriptions = new Map();\n    this.actionItems = new Map();\n    this.meetingInsights = new Map();\n\n    // Create default user\n    this.createUser({\n      username: \"john.smith\",\n      password: \"password123\",\n      name: \"John Smith\",\n      role: \"Newsletter Publisher\"\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      role: insertUser.role || null,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getMeeting(id: string): Promise<Meeting | undefined> {\n    return this.meetings.get(id);\n  }\n\n  async getMeetingsByUser(userId: string): Promise<Meeting[]> {\n    return Array.from(this.meetings.values()).filter(\n      (meeting) => meeting.userId === userId,\n    );\n  }\n\n  async createMeeting(insertMeeting: InsertMeeting): Promise<Meeting> {\n    const id = randomUUID();\n    const meeting: Meeting = {\n      ...insertMeeting,\n      id,\n      duration: insertMeeting.duration || null,\n      status: insertMeeting.status || null,\n      audioQuality: insertMeeting.audioQuality || null,\n      speakerCount: insertMeeting.speakerCount || null,\n      language: insertMeeting.language || null,\n      startTime: new Date(),\n      endTime: null,\n    };\n    this.meetings.set(id, meeting);\n    return meeting;\n  }\n\n  async updateMeeting(id: string, updates: Partial<Meeting>): Promise<Meeting | undefined> {\n    const meeting = this.meetings.get(id);\n    if (!meeting) return undefined;\n    \n    const updatedMeeting = { ...meeting, ...updates };\n    this.meetings.set(id, updatedMeeting);\n    return updatedMeeting;\n  }\n\n  async getTranscriptionsByMeeting(meetingId: string): Promise<Transcription[]> {\n    return Array.from(this.transcriptions.values())\n      .filter((t) => t.meetingId === meetingId)\n      .sort((a, b) => a.timestamp!.getTime() - b.timestamp!.getTime());\n  }\n\n  async createTranscription(insertTranscription: InsertTranscription): Promise<Transcription> {\n    const id = randomUUID();\n    const transcription: Transcription = {\n      ...insertTranscription,\n      id,\n      isStreaming: insertTranscription.isStreaming || null,\n      timestamp: new Date(),\n    };\n    this.transcriptions.set(id, transcription);\n    return transcription;\n  }\n\n  async updateTranscription(id: string, updates: Partial<Transcription>): Promise<Transcription | undefined> {\n    const transcription = this.transcriptions.get(id);\n    if (!transcription) return undefined;\n    \n    const updatedTranscription = { ...transcription, ...updates };\n    this.transcriptions.set(id, updatedTranscription);\n    return updatedTranscription;\n  }\n\n  async getActionItemsByMeeting(meetingId: string): Promise<ActionItem[]> {\n    return Array.from(this.actionItems.values())\n      .filter((item) => item.meetingId === meetingId)\n      .sort((a, b) => a.extractedAt!.getTime() - b.extractedAt!.getTime());\n  }\n\n  async createActionItem(insertActionItem: InsertActionItem): Promise<ActionItem> {\n    const id = randomUUID();\n    const actionItem: ActionItem = {\n      ...insertActionItem,\n      id,\n      description: insertActionItem.description || null,\n      status: insertActionItem.status || null,\n      assignedTo: insertActionItem.assignedTo || null,\n      dueDate: insertActionItem.dueDate || null,\n      isCompleted: insertActionItem.isCompleted || null,\n      extractedAt: new Date(),\n    };\n    this.actionItems.set(id, actionItem);\n    return actionItem;\n  }\n\n  async updateActionItem(id: string, updates: Partial<ActionItem>): Promise<ActionItem | undefined> {\n    const actionItem = this.actionItems.get(id);\n    if (!actionItem) return undefined;\n    \n    const updatedActionItem = { ...actionItem, ...updates };\n    this.actionItems.set(id, updatedActionItem);\n    return updatedActionItem;\n  }\n\n  async getMeetingInsight(meetingId: string): Promise<MeetingInsight | undefined> {\n    return Array.from(this.meetingInsights.values()).find(\n      (insight) => insight.meetingId === meetingId,\n    );\n  }\n\n  async createMeetingInsight(insertInsight: InsertMeetingInsight): Promise<MeetingInsight> {\n    const id = randomUUID();\n    const insight: MeetingInsight = {\n      ...insertInsight,\n      id,\n      keyTopics: insertInsight.keyTopics && Array.isArray(insertInsight.keyTopics) ? insertInsight.keyTopics : null,\n      sentiment: insertInsight.sentiment || null,\n      sentimentScore: insertInsight.sentimentScore || null,\n      summary: insertInsight.summary || null,\n      nextSteps: insertInsight.nextSteps || null,\n      generatedAt: new Date(),\n    };\n    this.meetingInsights.set(id, insight);\n    return insight;\n  }\n\n  async updateMeetingInsight(meetingId: string, updates: Partial<MeetingInsight>): Promise<MeetingInsight | undefined> {\n    const insight = Array.from(this.meetingInsights.values()).find(\n      (insight) => insight.meetingId === meetingId,\n    );\n    if (!insight) return undefined;\n    \n    const updatedInsight = { ...insight, ...updates };\n    this.meetingInsights.set(insight.id, updatedInsight);\n    return updatedInsight;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7448},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").default(\"Newsletter Publisher\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const meetings = pgTable(\"meetings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  status: text(\"status\").default(\"active\"), // active, paused, completed\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  duration: integer(\"duration\"), // in seconds\n  audioQuality: text(\"audio_quality\").default(\"excellent\"),\n  speakerCount: integer(\"speaker_count\").default(1),\n  language: text(\"language\").default(\"en-US\"),\n});\n\nexport const transcriptions = pgTable(\"transcriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  meetingId: varchar(\"meeting_id\").references(() => meetings.id).notNull(),\n  speakerName: text(\"speaker_name\").notNull(),\n  speakerInitials: text(\"speaker_initials\").notNull(),\n  speakerColor: text(\"speaker_color\").notNull(),\n  content: text(\"content\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  isStreaming: boolean(\"is_streaming\").default(false),\n});\n\nexport const actionItems = pgTable(\"action_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  meetingId: varchar(\"meeting_id\").references(() => meetings.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  assignedTo: text(\"assigned_to\"),\n  dueDate: text(\"due_date\"),\n  status: text(\"status\").default(\"pending\"), // pending, completed\n  isCompleted: boolean(\"is_completed\").default(false),\n  extractedAt: timestamp(\"extracted_at\").defaultNow(),\n});\n\nexport const meetingInsights = pgTable(\"meeting_insights\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  meetingId: varchar(\"meeting_id\").references(() => meetings.id).notNull(),\n  keyTopics: jsonb(\"key_topics\").$type<string[]>(),\n  sentiment: text(\"sentiment\"), // positive, neutral, negative\n  sentimentScore: text(\"sentiment_score\"),\n  summary: text(\"summary\"),\n  nextSteps: text(\"next_steps\"),\n  generatedAt: timestamp(\"generated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMeetingSchema = createInsertSchema(meetings).omit({\n  id: true,\n  startTime: true,\n});\n\nexport const insertTranscriptionSchema = createInsertSchema(transcriptions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertActionItemSchema = createInsertSchema(actionItems).omit({\n  id: true,\n  extractedAt: true,\n});\n\nexport const insertMeetingInsightSchema = createInsertSchema(meetingInsights).omit({\n  id: true,\n  generatedAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertMeeting = z.infer<typeof insertMeetingSchema>;\nexport type Meeting = typeof meetings.$inferSelect;\n\nexport type InsertTranscription = z.infer<typeof insertTranscriptionSchema>;\nexport type Transcription = typeof transcriptions.$inferSelect;\n\nexport type InsertActionItem = z.infer<typeof insertActionItemSchema>;\nexport type ActionItem = typeof actionItems.$inferSelect;\n\nexport type InsertMeetingInsight = z.infer<typeof insertMeetingInsightSchema>;\nexport type MeetingInsight = typeof meetingInsights.$inferSelect;\n\n// WebSocket message types\nexport const wsMessageSchema = z.union([\n  z.object({\n    type: z.literal(\"transcription\"),\n    data: z.object({\n      meetingId: z.string(),\n      speakerName: z.string(),\n      speakerInitials: z.string(),\n      speakerColor: z.string(),\n      content: z.string(),\n      isStreaming: z.boolean(),\n    }),\n  }),\n  z.object({\n    type: z.literal(\"action_item\"),\n    data: insertActionItemSchema,\n  }),\n  z.object({\n    type: z.literal(\"meeting_status\"),\n    data: z.object({\n      meetingId: z.string(),\n      status: z.enum([\"active\", \"paused\", \"completed\"]),\n      duration: z.number(),\n      speakerCount: z.number(),\n    }),\n  }),\n  z.object({\n    type: z.literal(\"error\"),\n    data: z.object({\n      message: z.string(),\n      code: z.string().optional(),\n    }),\n  }),\n  z.object({\n    type: z.literal(\"connection_status\"),\n    data: z.object({\n      connected: z.boolean(),\n      activeUsers: z.number(),\n    }),\n  }),\n]);\n\nexport type WSMessage = z.infer<typeof wsMessageSchema>;\n","size_bytes":4870},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport LiveTranscription from \"@/pages/live-transcription\";\nimport MeetingHistory from \"@/pages/meeting-history\";\nimport ActionItems from \"@/pages/action-items\";\nimport Integrations from \"@/pages/integrations\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/live\" component={LiveTranscription} />\n      <Route path=\"/history\" component={MeetingHistory} />\n      <Route path=\"/action-items\" component={ActionItems} />\n      <Route path=\"/integrations\" component={Integrations} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1261},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(60, 9%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(239, 84%, 67%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(215, 16%, 47%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(160, 84%, 39%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(239, 84%, 67%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.streaming-text {\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n.action-item {\n  background: linear-gradient(135deg, hsl(160, 84%, 39%, 0.1), hsl(160, 84%, 39%, 0.05));\n  border-left: 4px solid hsl(160, 84%, 39%);\n}\n\n.connection-indicator {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: hsl(160, 84%, 39%);\n  animation: connectionPulse 2s infinite;\n}\n\n@keyframes connectionPulse {\n  0% { opacity: 1; }\n  50% { opacity: 0.5; }\n  100% { opacity: 1; }\n}\n\n.speaker-blue { @apply bg-blue-500; }\n.speaker-green { @apply bg-green-500; }\n.speaker-purple { @apply bg-purple-500; }\n.speaker-red { @apply bg-red-500; }\n.speaker-yellow { @apply bg-yellow-500; }\n.speaker-pink { @apply bg-pink-500; }\n.speaker-indigo { @apply bg-indigo-500; }\n.speaker-gray { @apply bg-gray-500; }\n","size_bytes":6013},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat/completions\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport interface TranscriptionResponse {\n  text: string;\n  speakerName: string;\n  speakerInitials: string;\n  speakerColor: string;\n}\n\nexport interface ActionItemResponse {\n  title: string;\n  description: string;\n  assignedTo: string;\n  dueDate: string;\n}\n\nexport interface InsightResponse {\n  keyTopics: string[];\n  sentiment: string;\n  sentimentScore: string;\n  summary: string;\n  nextSteps: string;\n}\n\nexport class OpenAIService {\n  private conversationHistory: Map<string, ChatCompletionMessageParam[]> = new Map();\n  private readonly systemPrompt = `You are MeetingFlow, an AI assistant specialized in transcribing meetings for newsletter publishers and content creators. You help extract actionable insights, identify speakers, and highlight important action items.\n\nYour responses should be:\n- Professional but conversational\n- Focused on content strategy and newsletter publishing\n- Helpful in identifying actionable tasks\n- Natural and human-like, avoiding robotic language\n- Contextually aware of previous conversation\n\nWhen processing meeting content, focus on:\n- Content strategy discussions\n- Editorial calendar planning\n- Audience engagement metrics\n- Campaign performance reviews\n- Team assignments and deadlines\n- Tool integrations and workflows`;\n\n  async processTranscription(\n    meetingId: string, \n    audioText: string, \n    speakerContext?: string\n  ): Promise<TranscriptionResponse> {\n    try {\n      const messages: ChatCompletionMessageParam[] = [\n        { role: \"system\", content: this.systemPrompt },\n        { \n          role: \"user\", \n          content: `Process this meeting transcription and identify the speaker. If speaker context is provided, use it to maintain consistency.\n          \n          Audio text: \"${audioText}\"\n          Speaker context: ${speakerContext || \"New speaker\"}\n          \n          Respond with JSON in this format:\n          {\n            \"text\": \"cleaned and formatted transcription\",\n            \"speakerName\": \"Speaker Full Name\",\n            \"speakerInitials\": \"XX\", \n            \"speakerColor\": \"css-color-class\"\n          }` \n        }\n      ];\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages,\n        response_format: { type: \"json_object\" },\n        temperature: 0.3,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      // Update conversation history\n      this.updateConversationHistory(meetingId, messages, response.choices[0].message.content || \"\");\n\n      return {\n        text: result.text || audioText,\n        speakerName: result.speakerName || \"Unknown Speaker\",\n        speakerInitials: result.speakerInitials || \"US\",\n        speakerColor: result.speakerColor || \"bg-gray-500\"\n      };\n    } catch (error) {\n      console.error(\"OpenAI transcription processing error:\", error);\n      throw new Error(\"Failed to process transcription: \" + (error as Error).message);\n    }\n  }\n\n  async extractActionItems(meetingId: string, transcriptText: string): Promise<ActionItemResponse[]> {\n    try {\n      const context = this.getConversationContext(meetingId);\n      \n      const messages: ChatCompletionMessageParam[] = [\n        { role: \"system\", content: this.systemPrompt },\n        ...context,\n        {\n          role: \"user\",\n          content: `Analyze this meeting transcript and extract action items relevant to newsletter publishing and content creation.\n\n          Transcript: \"${transcriptText}\"\n\n          Focus on identifying:\n          - Content creation tasks\n          - Editorial deadlines\n          - Campaign planning items\n          - Tool integrations\n          - Follow-up meetings\n          - Performance analysis tasks\n\n          Respond with JSON in this format:\n          {\n            \"actionItems\": [\n              {\n                \"title\": \"Brief action title\",\n                \"description\": \"Detailed description\",\n                \"assignedTo\": \"Person name if mentioned\",\n                \"dueDate\": \"Timeframe if mentioned\"\n              }\n            ]\n          }`\n        }\n      ];\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages,\n        response_format: { type: \"json_object\" },\n        temperature: 0.2,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      this.updateConversationHistory(meetingId, messages, response.choices[0].message.content || \"\");\n\n      return result.actionItems || [];\n    } catch (error) {\n      console.error(\"OpenAI action item extraction error:\", error);\n      throw new Error(\"Failed to extract action items: \" + (error as Error).message);\n    }\n  }\n\n  async generateMeetingInsights(meetingId: string, fullTranscript: string): Promise<InsightResponse> {\n    try {\n      const context = this.getConversationContext(meetingId);\n      \n      const messages: ChatCompletionMessageParam[] = [\n        { role: \"system\", content: this.systemPrompt },\n        ...context,\n        {\n          role: \"user\",\n          content: `Analyze this complete meeting transcript and provide insights for newsletter publishers.\n\n          Full transcript: \"${fullTranscript}\"\n\n          Generate comprehensive insights including:\n          - Key discussion topics\n          - Overall sentiment and team dynamics\n          - Strategic next steps\n          - Summary of decisions made\n\n          Respond with JSON in this format:\n          {\n            \"keyTopics\": [\"topic1\", \"topic2\", \"topic3\"],\n            \"sentiment\": \"positive|neutral|negative\",\n            \"sentimentScore\": \"descriptive explanation\",\n            \"summary\": \"3-4 sentence meeting summary\",\n            \"nextSteps\": \"Key next steps and recommendations\"\n          }`\n        }\n      ];\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages,\n        response_format: { type: \"json_object\" },\n        temperature: 0.4,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      this.updateConversationHistory(meetingId, messages, response.choices[0].message.content || \"\");\n\n      return {\n        keyTopics: result.keyTopics || [],\n        sentiment: result.sentiment || \"neutral\",\n        sentimentScore: result.sentimentScore || \"Neutral meeting tone\",\n        summary: result.summary || \"Meeting discussion completed\",\n        nextSteps: result.nextSteps || \"Follow up on discussed items\"\n      };\n    } catch (error) {\n      console.error(\"OpenAI insights generation error:\", error);\n      throw new Error(\"Failed to generate meeting insights: \" + (error as Error).message);\n    }\n  }\n\n  async streamChatResponse(meetingId: string, userMessage: string): Promise<AsyncIterableIterator<string>> {\n    const context = this.getConversationContext(meetingId);\n    \n    const messages: ChatCompletionMessageParam[] = [\n      { role: \"system\", content: this.systemPrompt },\n      ...context,\n      { role: \"user\", content: userMessage }\n    ];\n\n    const stream = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages,\n      stream: true,\n      temperature: 0.7,\n    });\n\n    return this.processStreamResponse(stream, meetingId, messages);\n  }\n\n  private async *processStreamResponse(\n    stream: AsyncIterable<OpenAI.Chat.Completions.ChatCompletionChunk>,\n    meetingId: string,\n    messages: ChatCompletionMessageParam[]\n  ): AsyncIterableIterator<string> {\n    let fullResponse = \"\";\n    \n    for await (const chunk of stream) {\n      const content = chunk.choices[0]?.delta?.content || \"\";\n      if (content) {\n        fullResponse += content;\n        yield content;\n      }\n    }\n\n    // Update conversation history with complete response\n    this.updateConversationHistory(meetingId, messages, fullResponse);\n  }\n\n  private getConversationContext(meetingId: string): ChatCompletionMessageParam[] {\n    const history = this.conversationHistory.get(meetingId) || [];\n    // Keep last 10 exchanges to maintain context without hitting token limits\n    return history.slice(-20);\n  }\n\n  private updateConversationHistory(\n    meetingId: string, \n    messages: ChatCompletionMessageParam[], \n    assistantResponse: string\n  ): void {\n    let history = this.conversationHistory.get(meetingId) || [];\n    \n    // Add user message and assistant response\n    const userMessage = messages[messages.length - 1];\n    if (userMessage.role === \"user\") {\n      history.push(userMessage);\n      history.push({ role: \"assistant\", content: assistantResponse });\n    }\n\n    // Maintain context window\n    if (history.length > 40) {\n      history = history.slice(-30);\n    }\n\n    this.conversationHistory.set(meetingId, history);\n  }\n\n  clearConversationHistory(meetingId: string): void {\n    this.conversationHistory.delete(meetingId);\n  }\n}\n\nexport const openaiService = new OpenAIService();\n","size_bytes":9263},"server/services/transcription.ts":{"content":"import { storage } from \"../storage\";\nimport { openaiService } from \"./openai\";\nimport type { WSMessage, InsertTranscription, InsertActionItem } from \"@shared/schema\";\n\nexport class TranscriptionService {\n  private activeMeetings: Map<string, {\n    transcriptionBuffer: string;\n    lastActionItemCheck: number;\n    speakerMap: Map<string, { name: string; initials: string; color: string }>;\n  }> = new Map();\n\n  async processAudioStream(\n    meetingId: string, \n    audioText: string, \n    wsCallback: (message: WSMessage) => void\n  ): Promise<void> {\n    try {\n      // Initialize meeting context if not exists\n      if (!this.activeMeetings.has(meetingId)) {\n        this.activeMeetings.set(meetingId, {\n          transcriptionBuffer: \"\",\n          lastActionItemCheck: Date.now(),\n          speakerMap: new Map()\n        });\n      }\n\n      const meetingContext = this.activeMeetings.get(meetingId)!;\n\n      // Process transcription with OpenAI\n      const transcriptionResult = await openaiService.processTranscription(\n        meetingId, \n        audioText,\n        this.getSpeakerContext(meetingContext.speakerMap)\n      );\n\n      // Update speaker map\n      meetingContext.speakerMap.set(transcriptionResult.speakerName, {\n        name: transcriptionResult.speakerName,\n        initials: transcriptionResult.speakerInitials,\n        color: transcriptionResult.speakerColor\n      });\n\n      // Store transcription\n      const transcription = await storage.createTranscription({\n        meetingId,\n        speakerName: transcriptionResult.speakerName,\n        speakerInitials: transcriptionResult.speakerInitials,\n        speakerColor: transcriptionResult.speakerColor,\n        content: transcriptionResult.text,\n        isStreaming: false\n      });\n\n      // Send real-time transcription update\n      wsCallback({\n        type: \"transcription\",\n        data: {\n          meetingId,\n          speakerName: transcription.speakerName,\n          speakerInitials: transcription.speakerInitials,\n          speakerColor: transcription.speakerColor,\n          content: transcription.content,\n          isStreaming: false\n        }\n      });\n\n      // Update transcription buffer\n      meetingContext.transcriptionBuffer += ` ${transcriptionResult.text}`;\n\n      // Check for action items every 30 seconds or 500 characters\n      const shouldCheckActionItems = \n        Date.now() - meetingContext.lastActionItemCheck > 30000 ||\n        meetingContext.transcriptionBuffer.length > 500;\n\n      if (shouldCheckActionItems) {\n        await this.extractActionItems(meetingId, meetingContext.transcriptionBuffer, wsCallback);\n        meetingContext.lastActionItemCheck = Date.now();\n      }\n\n      // Update meeting stats\n      await this.updateMeetingStats(meetingId, wsCallback);\n\n    } catch (error) {\n      console.error(\"Transcription processing error:\", error);\n      wsCallback({\n        type: \"error\",\n        data: {\n          message: \"Failed to process transcription\",\n          code: \"TRANSCRIPTION_ERROR\"\n        }\n      });\n    }\n  }\n\n  async processStreamingText(\n    meetingId: string,\n    partialText: string,\n    speakerInfo: { name: string; initials: string; color: string },\n    wsCallback: (message: WSMessage) => void\n  ): Promise<void> {\n    try {\n      // Send streaming update\n      wsCallback({\n        type: \"transcription\",\n        data: {\n          meetingId,\n          speakerName: speakerInfo.name,\n          speakerInitials: speakerInfo.initials,\n          speakerColor: speakerInfo.color,\n          content: partialText,\n          isStreaming: true\n        }\n      });\n    } catch (error) {\n      console.error(\"Streaming text error:\", error);\n    }\n  }\n\n  private async extractActionItems(\n    meetingId: string, \n    transcriptText: string, \n    wsCallback: (message: WSMessage) => void\n  ): Promise<void> {\n    try {\n      const actionItems = await openaiService.extractActionItems(meetingId, transcriptText);\n\n      for (const item of actionItems) {\n        // Store action item\n        const actionItem = await storage.createActionItem({\n          meetingId,\n          title: item.title,\n          description: item.description,\n          assignedTo: item.assignedTo,\n          dueDate: item.dueDate,\n          status: \"pending\",\n          isCompleted: false\n        });\n\n        // Send real-time action item update\n        wsCallback({\n          type: \"action_item\",\n          data: {\n            meetingId: actionItem.meetingId,\n            title: actionItem.title,\n            description: actionItem.description || \"\",\n            assignedTo: actionItem.assignedTo || \"\",\n            dueDate: actionItem.dueDate || \"\",\n            status: actionItem.status || \"pending\",\n            isCompleted: actionItem.isCompleted || false\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Action item extraction error:\", error);\n    }\n  }\n\n  private async updateMeetingStats(\n    meetingId: string, \n    wsCallback: (message: WSMessage) => void\n  ): Promise<void> {\n    try {\n      const meeting = await storage.getMeeting(meetingId);\n      if (!meeting) return;\n\n      const transcriptions = await storage.getTranscriptionsByMeeting(meetingId);\n      const uniqueSpeakers = new Set(transcriptions.map(t => t.speakerName)).size;\n      \n      const duration = meeting.startTime \n        ? Math.floor((Date.now() - meeting.startTime.getTime()) / 1000)\n        : 0;\n\n      // Update meeting record\n      await storage.updateMeeting(meetingId, {\n        duration,\n        speakerCount: uniqueSpeakers\n      });\n\n      // Send meeting status update\n      wsCallback({\n        type: \"meeting_status\",\n        data: {\n          meetingId,\n          status: meeting.status as \"active\" | \"paused\" | \"completed\",\n          duration,\n          speakerCount: uniqueSpeakers\n        }\n      });\n    } catch (error) {\n      console.error(\"Meeting stats update error:\", error);\n    }\n  }\n\n  private getSpeakerContext(speakerMap: Map<string, any>): string {\n    const speakers = Array.from(speakerMap.values());\n    if (speakers.length === 0) return \"No previous speakers\";\n    \n    return `Known speakers: ${speakers.map(s => `${s.name} (${s.initials})`).join(\", \")}`;\n  }\n\n  async finalizeMeeting(\n    meetingId: string, \n    wsCallback: (message: WSMessage) => void\n  ): Promise<void> {\n    try {\n      const transcriptions = await storage.getTranscriptionsByMeeting(meetingId);\n      const fullTranscript = transcriptions.map(t => `${t.speakerName}: ${t.content}`).join(\"\\n\");\n\n      // Generate comprehensive insights\n      const insights = await openaiService.generateMeetingInsights(meetingId, fullTranscript);\n\n      // Store insights\n      await storage.createMeetingInsight({\n        meetingId,\n        keyTopics: insights.keyTopics,\n        sentiment: insights.sentiment,\n        sentimentScore: insights.sentimentScore,\n        summary: insights.summary,\n        nextSteps: insights.nextSteps\n      });\n\n      // Update meeting status\n      await storage.updateMeeting(meetingId, {\n        status: \"completed\",\n        endTime: new Date()\n      });\n\n      // Clean up active meeting context\n      this.activeMeetings.delete(meetingId);\n      openaiService.clearConversationHistory(meetingId);\n\n      // Send final meeting status\n      wsCallback({\n        type: \"meeting_status\",\n        data: {\n          meetingId,\n          status: \"completed\",\n          duration: 0,\n          speakerCount: 0\n        }\n      });\n\n    } catch (error) {\n      console.error(\"Meeting finalization error:\", error);\n      wsCallback({\n        type: \"error\",\n        data: {\n          message: \"Failed to finalize meeting\",\n          code: \"FINALIZATION_ERROR\"\n        }\n      });\n    }\n  }\n\n  getActiveMeetingCount(): number {\n    return this.activeMeetings.size;\n  }\n}\n\nexport const transcriptionService = new TranscriptionService();\n","size_bytes":7862},"server/services/websocket.ts":{"content":"import { WebSocket, WebSocketServer } from \"ws\";\nimport type { Server } from \"http\";\nimport { transcriptionService } from \"./transcription\";\nimport { openaiService } from \"./openai\";\nimport type { WSMessage } from \"@shared/schema\";\n\nexport class WebSocketManager {\n  private wss: WebSocketServer;\n  private clients: Map<WebSocket, {\n    id: string;\n    meetingId?: string;\n    lastPing: number;\n    isAlive: boolean;\n  }> = new Map();\n  private pingInterval!: NodeJS.Timeout;\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server, \n      path: '/ws',\n      perMessageDeflate: false\n    });\n\n    this.setupWebSocketServer();\n    this.startHealthCheck();\n  }\n\n  private setupWebSocketServer(): void {\n    this.wss.on('connection', (ws: WebSocket, request) => {\n      const clientId = this.generateClientId();\n      \n      // Initialize client metadata\n      this.clients.set(ws, {\n        id: clientId,\n        lastPing: Date.now(),\n        isAlive: true\n      });\n\n      console.log(`WebSocket client connected: ${clientId}`);\n\n      // Send connection status\n      this.sendToClient(ws, {\n        type: \"connection_status\",\n        data: {\n          connected: true,\n          activeUsers: this.clients.size\n        }\n      });\n\n      // Handle incoming messages\n      ws.on('message', async (data: Buffer) => {\n        try {\n          await this.handleMessage(ws, data);\n        } catch (error) {\n          console.error(\"WebSocket message handling error:\", error);\n          this.sendToClient(ws, {\n            type: \"error\",\n            data: {\n              message: \"Failed to process message\",\n              code: \"MESSAGE_PROCESSING_ERROR\"\n            }\n          });\n        }\n      });\n\n      // Handle pong responses\n      ws.on('pong', () => {\n        const clientData = this.clients.get(ws);\n        if (clientData) {\n          clientData.isAlive = true;\n          clientData.lastPing = Date.now();\n        }\n      });\n\n      // Handle client disconnect\n      ws.on('close', (code, reason) => {\n        const clientData = this.clients.get(ws);\n        if (clientData) {\n          console.log(`WebSocket client disconnected: ${clientData.id} (${code}: ${reason})`);\n          this.clients.delete(ws);\n          \n          // Broadcast updated user count\n          this.broadcast({\n            type: \"connection_status\",\n            data: {\n              connected: true,\n              activeUsers: this.clients.size\n            }\n          });\n        }\n      });\n\n      // Handle errors\n      ws.on('error', (error) => {\n        console.error(\"WebSocket error:\", error);\n        const clientData = this.clients.get(ws);\n        if (clientData) {\n          this.clients.delete(ws);\n        }\n      });\n    });\n\n    this.wss.on('error', (error) => {\n      console.error(\"WebSocket server error:\", error);\n    });\n  }\n\n  private async handleMessage(ws: WebSocket, data: Buffer): Promise<void> {\n    try {\n      const message = JSON.parse(data.toString());\n      const clientData = this.clients.get(ws);\n      \n      if (!clientData) {\n        throw new Error(\"Client not found\");\n      }\n\n      switch (message.type) {\n        case 'join_meeting':\n          await this.handleJoinMeeting(ws, message.meetingId);\n          break;\n\n        case 'audio_stream':\n          await this.handleAudioStream(ws, message);\n          break;\n\n        case 'text_stream':\n          await this.handleTextStream(ws, message);\n          break;\n\n        case 'chat_message':\n          await this.handleChatMessage(ws, message);\n          break;\n\n        case 'stop_meeting':\n          await this.handleStopMeeting(ws, message.meetingId);\n          break;\n\n        case 'ping':\n          this.sendToClient(ws, { type: 'pong', data: { timestamp: Date.now() } });\n          break;\n\n        default:\n          throw new Error(`Unknown message type: ${message.type}`);\n      }\n    } catch (error) {\n      console.error(\"Message parsing error:\", error);\n      this.sendToClient(ws, {\n        type: \"error\",\n        data: {\n          message: \"Invalid message format\",\n          code: \"INVALID_MESSAGE\"\n        }\n      });\n    }\n  }\n\n  private async handleJoinMeeting(ws: WebSocket, meetingId: string): Promise<void> {\n    const clientData = this.clients.get(ws);\n    if (clientData) {\n      clientData.meetingId = meetingId;\n      \n      this.sendToClient(ws, {\n        type: \"meeting_status\",\n        data: {\n          meetingId,\n          status: \"active\",\n          duration: 0,\n          speakerCount: 1\n        }\n      });\n    }\n  }\n\n  private async handleAudioStream(ws: WebSocket, message: any): Promise<void> {\n    const clientData = this.clients.get(ws);\n    if (!clientData?.meetingId) {\n      throw new Error(\"No active meeting\");\n    }\n\n    // Process audio transcription\n    await transcriptionService.processAudioStream(\n      clientData.meetingId,\n      message.audioText,\n      (wsMessage: WSMessage) => {\n        // Broadcast to all clients in the meeting\n        this.broadcastToMeeting(clientData.meetingId!, wsMessage);\n      }\n    );\n  }\n\n  private async handleTextStream(ws: WebSocket, message: any): Promise<void> {\n    const clientData = this.clients.get(ws);\n    if (!clientData?.meetingId) {\n      throw new Error(\"No active meeting\");\n    }\n\n    // Process streaming text\n    await transcriptionService.processStreamingText(\n      clientData.meetingId,\n      message.partialText,\n      message.speakerInfo,\n      (wsMessage: WSMessage) => {\n        this.broadcastToMeeting(clientData.meetingId!, wsMessage);\n      }\n    );\n  }\n\n  private async handleChatMessage(ws: WebSocket, message: any): Promise<void> {\n    const clientData = this.clients.get(ws);\n    if (!clientData?.meetingId) {\n      throw new Error(\"No active meeting\");\n    }\n\n    try {\n      // Stream AI response\n      const responseStream = await openaiService.streamChatResponse(\n        clientData.meetingId,\n        message.content\n      );\n\n      // Send streaming response\n      for await (const chunk of responseStream) {\n        if (ws.readyState === WebSocket.OPEN) {\n          this.sendToClient(ws, {\n            type: \"transcription\",\n            data: {\n              meetingId: clientData.meetingId,\n              speakerName: \"MeetingFlow AI\",\n              speakerInitials: \"AI\",\n              speakerColor: \"bg-purple-500\",\n              content: chunk,\n              isStreaming: true\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.error(\"Chat message error:\", error);\n      this.sendToClient(ws, {\n        type: \"error\",\n        data: {\n          message: \"Failed to process chat message\",\n          code: \"CHAT_ERROR\"\n        }\n      });\n    }\n  }\n\n  private async handleStopMeeting(ws: WebSocket, meetingId: string): Promise<void> {\n    await transcriptionService.finalizeMeeting(\n      meetingId,\n      (wsMessage: WSMessage) => {\n        this.broadcastToMeeting(meetingId, wsMessage);\n      }\n    );\n  }\n\n  private sendToClient(ws: WebSocket, message: any): void {\n    if (ws.readyState === WebSocket.OPEN) {\n      try {\n        ws.send(JSON.stringify(message));\n      } catch (error) {\n        console.error(\"Failed to send message to client:\", error);\n      }\n    }\n  }\n\n  private broadcast(message: WSMessage): void {\n    this.clients.forEach((clientData, ws) => {\n      this.sendToClient(ws, message);\n    });\n  }\n\n  private broadcastToMeeting(meetingId: string, message: WSMessage): void {\n    this.clients.forEach((clientData, ws) => {\n      if (clientData.meetingId === meetingId) {\n        this.sendToClient(ws, message);\n      }\n    });\n  }\n\n  private generateClientId(): string {\n    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private startHealthCheck(): void {\n    this.pingInterval = setInterval(() => {\n      this.clients.forEach((clientData, ws) => {\n        if (!clientData.isAlive) {\n          console.log(`Terminating inactive client: ${clientData.id}`);\n          ws.terminate();\n          this.clients.delete(ws);\n          return;\n        }\n\n        clientData.isAlive = false;\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.ping();\n        }\n      });\n\n      // Broadcast updated connection count\n      this.broadcast({\n        type: \"connection_status\",\n        data: {\n          connected: true,\n          activeUsers: this.clients.size\n        }\n      });\n    }, 30000); // Check every 30 seconds\n  }\n\n  getActiveConnections(): number {\n    return this.clients.size;\n  }\n\n  getActiveMeetings(): number {\n    const meetingIds = new Set();\n    this.clients.forEach(clientData => {\n      if (clientData.meetingId) {\n        meetingIds.add(clientData.meetingId);\n      }\n    });\n    return meetingIds.size;\n  }\n\n  shutdown(): void {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n    }\n    \n    this.wss.close(() => {\n      console.log(\"WebSocket server closed\");\n    });\n  }\n}\n","size_bytes":8933},"client/src/components/action-items-panel.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Check, Square, Download, ExternalLink, CheckSquare } from 'lucide-react';\nimport { SiNotion, SiTrello, SiSlack } from 'react-icons/si';\nimport { Mail } from 'lucide-react';\nimport type { ActionItem } from '@shared/schema';\n\ninterface ActionItemsPanelProps {\n  actionItems: ActionItem[];\n  onToggleActionItem: (id: string) => void;\n  onExportActionItems: () => void;\n  onExportTo: (platform: string) => void;\n}\n\nexport function ActionItemsPanel({ \n  actionItems, \n  onToggleActionItem, \n  onExportActionItems,\n  onExportTo \n}: ActionItemsPanelProps) {\n  const exportPlatforms = [\n    { name: 'notion', label: 'Export to Notion', icon: SiNotion, color: 'text-black' },\n    { name: 'trello', label: 'Export to Trello', icon: SiTrello, color: 'text-blue-600' },\n    { name: 'slack', label: 'Send to Slack', icon: SiSlack, color: 'text-purple-600' },\n    { name: 'email', label: 'Email Summary', icon: Mail, color: 'text-red-500' }\n  ];\n\n  // Mock insights data - in production this would come from props or API\n  const insights = {\n    keyTopics: ['Q4 Strategy', 'Analytics', 'Holiday Campaign'],\n    sentiment: 'Positive and collaborative tone throughout the meeting',\n    nextSteps: '3 action items identified, 2 follow-up meetings suggested'\n  };\n\n  return (\n    <div className=\"w-96 p-6\" data-testid=\"action-items-panel\">\n      <div className=\"space-y-6\">\n        {/* Action Items */}\n        <div className=\"bg-card rounded-lg border border-border\">\n          <div className=\"p-4 border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold text-foreground\" data-testid=\"action-items-title\">\n                Action Items\n              </h3>\n              <span className=\"bg-accent/10 text-accent px-2 py-1 rounded-full text-xs font-medium\">\n                Auto-detected\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"p-4 space-y-3\" data-testid=\"action-items-list\">\n            {actionItems.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-4\" data-testid=\"empty-action-items\">\n                <CheckSquare className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                <p>No action items detected yet...</p>\n              </div>\n            ) : (\n              actionItems.map((item) => (\n                <div \n                  key={item.id} \n                  className=\"action-item p-3 rounded-md\"\n                  data-testid={`action-item-${item.id}`}\n                >\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <h4 className=\"font-medium text-foreground text-sm\" data-testid={`action-title-${item.id}`}>\n                      {item.title}\n                    </h4>\n                    <button \n                      className=\"text-muted-foreground hover:text-foreground\"\n                      onClick={() => onToggleActionItem(item.id)}\n                      data-testid={`button-toggle-${item.id}`}\n                    >\n                      {item.isCompleted ? (\n                        <Check className=\"w-4 h-4 text-accent\" />\n                      ) : (\n                        <Square className=\"w-4 h-4\" />\n                      )}\n                    </button>\n                  </div>\n                  {item.description && (\n                    <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`action-description-${item.id}`}>\n                      {item.description}\n                    </p>\n                  )}\n                  <div className=\"flex items-center justify-between text-xs\">\n                    {item.assignedTo && (\n                      <span className=\"text-muted-foreground\" data-testid={`action-assignee-${item.id}`}>\n                        Assigned: {item.assignedTo}\n                      </span>\n                    )}\n                    {item.dueDate && (\n                      <span className=\"text-muted-foreground\" data-testid={`action-due-${item.id}`}>\n                        Due: {item.dueDate}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n          \n          {actionItems.length > 0 && (\n            <div className=\"p-4 border-t border-border\">\n              <Button \n                className=\"w-full\"\n                onClick={onExportActionItems}\n                data-testid=\"button-export-action-items\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export to Task Manager\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Meeting Insights */}\n        <div className=\"bg-card rounded-lg border border-border\">\n          <div className=\"p-4 border-b border-border\">\n            <h3 className=\"font-semibold text-foreground\" data-testid=\"insights-title\">\n              AI Insights\n            </h3>\n          </div>\n          \n          <div className=\"p-4 space-y-4\" data-testid=\"insights-content\">\n            <div className=\"bg-blue-50 border-l-4 border-blue-400 p-3 rounded-r-md\">\n              <h4 className=\"font-medium text-blue-900 text-sm mb-1\">Key Topics</h4>\n              <div className=\"flex flex-wrap gap-1\" data-testid=\"key-topics\">\n                {insights.keyTopics.map((topic, index) => (\n                  <span \n                    key={index}\n                    className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs\"\n                    data-testid={`topic-${index}`}\n                  >\n                    {topic}\n                  </span>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"bg-green-50 border-l-4 border-green-400 p-3 rounded-r-md\">\n              <h4 className=\"font-medium text-green-900 text-sm mb-1\">Sentiment Analysis</h4>\n              <p className=\"text-green-700 text-sm\" data-testid=\"sentiment-analysis\">\n                {insights.sentiment}\n              </p>\n            </div>\n            \n            <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-3 rounded-r-md\">\n              <h4 className=\"font-medium text-yellow-900 text-sm mb-1\">Next Steps</h4>\n              <p className=\"text-yellow-700 text-sm\" data-testid=\"next-steps\">\n                {insights.nextSteps}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Integration Quick Actions */}\n        <div className=\"bg-card rounded-lg border border-border\">\n          <div className=\"p-4 border-b border-border\">\n            <h3 className=\"font-semibold text-foreground\" data-testid=\"export-title\">\n              Quick Export\n            </h3>\n          </div>\n          \n          <div className=\"p-4 space-y-2\" data-testid=\"export-options\">\n            {exportPlatforms.map((platform) => {\n              const IconComponent = platform.icon;\n              return (\n                <button\n                  key={platform.name}\n                  onClick={() => onExportTo(platform.name)}\n                  className=\"w-full flex items-center space-x-3 p-3 bg-muted hover:bg-muted/80 rounded-md text-sm transition-colors\"\n                  data-testid={`button-export-${platform.name}`}\n                >\n                  <IconComponent className={`text-xl ${platform.color}`} />\n                  <span className=\"font-medium\">{platform.label}</span>\n                  <ExternalLink className=\"w-4 h-4 ml-auto text-muted-foreground\" />\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7694},"client/src/components/header.tsx":{"content":"interface HeaderProps {\n  user: {\n    name: string;\n    initials: string;\n    role: string;\n  };\n  activeUsers: number;\n}\n\nexport function Header({ user, activeUsers }: HeaderProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"page-title\">\n            Live Meeting Transcription\n          </h2>\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"page-subtitle\">\n            Real-time AI-powered transcription with action item extraction\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Connection Status */}\n          <div \n            className=\"flex items-center space-x-2 bg-accent/10 px-3 py-1 rounded-full\"\n            data-testid=\"active-users\"\n          >\n            <div className=\"w-2 h-2 bg-accent rounded-full\" />\n            <span className=\"text-sm font-medium text-accent\">\n              {activeUsers}+ users online\n            </span>\n          </div>\n          \n          {/* User Profile */}\n          <div className=\"flex items-center space-x-3\" data-testid=\"user-profile\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-primary-foreground\" data-testid=\"user-initials\">\n                {user.initials}\n              </span>\n            </div>\n            <div className=\"text-sm\">\n              <p className=\"font-medium text-foreground\" data-testid=\"user-name\">\n                {user.name}\n              </p>\n              <p className=\"text-muted-foreground\" data-testid=\"user-role\">\n                {user.role}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1920},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { \n  Mic, \n  Home, \n  Play, \n  History, \n  CheckSquare, \n  Plug, \n  Settings \n} from 'lucide-react';\n\ninterface SidebarProps {\n  connectionStatus: {\n    isConnected: boolean;\n    activeUsers: number;\n  };\n}\n\nexport function Sidebar({ connectionStatus }: SidebarProps) {\n  const [location] = useLocation();\n\n  const navigationItems = [\n    { path: '/', icon: Home, label: 'Dashboard', active: location === '/' },\n    { path: '/live', icon: Play, label: 'Live Transcription', active: location === '/live' },\n    { path: '/history', icon: History, label: 'Meeting History', active: location === '/history' },\n    { path: '/action-items', icon: CheckSquare, label: 'Action Items', active: location === '/action-items' },\n    { path: '/integrations', icon: Plug, label: 'Integrations', active: location === '/integrations' },\n    { path: '/settings', icon: Settings, label: 'Settings', active: location === '/settings' }\n  ];\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex-shrink-0\" data-testid=\"sidebar\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-8\" data-testid=\"logo\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Mic className=\"w-5 h-5 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"font-semibold text-foreground\">MeetingFlow</h1>\n            <p className=\"text-xs text-muted-foreground\">AI Transcription</p>\n          </div>\n        </div>\n        \n        <nav className=\"space-y-2\" data-testid=\"navigation\">\n          {navigationItems.map((item) => {\n            const IconComponent = item.icon;\n            return (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`flex items-center space-x-3 px-3 py-2 rounded-md transition-colors ${\n                  item.active\n                    ? 'bg-primary/10 text-primary'\n                    : 'text-muted-foreground hover:bg-muted hover:text-foreground'\n                }`}\n                data-testid={`nav-${item.label.toLowerCase().replace(' ', '-')}`}\n              >\n                <IconComponent className=\"w-4 h-4\" />\n                <span className={item.active ? 'font-medium' : ''}>{item.label}</span>\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n      \n      <div className=\"absolute bottom-6 left-6 right-6\">\n        <div className=\"bg-muted rounded-lg p-4\" data-testid=\"connection-status\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <div \n              className={`connection-indicator ${connectionStatus.isConnected ? 'bg-accent' : 'bg-destructive'}`}\n              data-testid=\"connection-indicator\"\n            />\n            <span className=\"text-sm font-medium text-foreground\">\n              {connectionStatus.isConnected ? 'Connected' : 'Disconnected'}\n            </span>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            {connectionStatus.isConnected \n              ? 'WebSocket streaming active'\n              : 'Attempting to reconnect...'\n            }\n          </p>\n          {connectionStatus.isConnected && (\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {connectionStatus.activeUsers} users online\n            </p>\n          )}\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3470},"client/src/components/transcription-panel.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Clock, Square, Pause, Mic, Users, Languages } from 'lucide-react';\nimport type { TranscriptionMessage } from '@/hooks/use-transcription';\n\ninterface TranscriptionPanelProps {\n  transcriptions: TranscriptionMessage[];\n  meetingStatus: {\n    status: string;\n    duration: number;\n    speakerCount: number;\n  };\n  formatDuration: (seconds: number) => string;\n  onStopRecording: () => void;\n  onPauseRecording: () => void;\n  onSendMessage?: (message: string) => void;\n}\n\nexport function TranscriptionPanel({ \n  transcriptions, \n  meetingStatus, \n  formatDuration, \n  onStopRecording, \n  onPauseRecording,\n  onSendMessage \n}: TranscriptionPanelProps) {\n  const [chatMessage, setChatMessage] = useState('');\n\n  const handleSendMessage = () => {\n    if (chatMessage.trim() && onSendMessage) {\n      onSendMessage(chatMessage);\n      setChatMessage('');\n    }\n  };\n\n  const getSpeakerColorClass = (color: string) => {\n    const colorMap: Record<string, string> = {\n      'bg-blue-500': 'speaker-blue',\n      'bg-green-500': 'speaker-green',\n      'bg-purple-500': 'speaker-purple',\n      'bg-red-500': 'speaker-red',\n      'bg-yellow-500': 'speaker-yellow',\n      'bg-pink-500': 'speaker-pink',\n      'bg-indigo-500': 'speaker-indigo',\n      'bg-gray-500': 'speaker-gray'\n    };\n    return colorMap[color] || 'bg-gray-500';\n  };\n\n  return (\n    <div className=\"flex-1 p-6\" data-testid=\"transcription-panel\">\n      <div className=\"bg-card rounded-lg border border-border h-full flex flex-col\">\n        {/* Transcription Header */}\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <h3 className=\"font-semibold text-foreground\" data-testid=\"transcription-title\">\n                Real-time Transcription\n              </h3>\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <Clock className=\"w-4 h-4\" />\n                <span data-testid=\"meeting-duration\">\n                  {formatDuration(meetingStatus.duration)}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"destructive\" \n                size=\"sm\"\n                onClick={onStopRecording}\n                data-testid=\"button-stop-recording\"\n              >\n                <Square className=\"w-4 h-4 mr-1\" />\n                Stop Recording\n              </Button>\n              <Button \n                variant=\"secondary\" \n                size=\"sm\"\n                onClick={onPauseRecording}\n                data-testid=\"button-pause-recording\"\n              >\n                <Pause className=\"w-4 h-4 mr-1\" />\n                Pause\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Transcription Content */}\n        <div \n          className=\"flex-1 p-4 overflow-y-auto space-y-4\"\n          data-testid=\"transcription-content\"\n        >\n          {transcriptions.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\" data-testid=\"empty-transcription\">\n              <Mic className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n              <p>Start speaking to begin real-time transcription...</p>\n            </div>\n          ) : (\n            transcriptions.map((transcription, index) => (\n              <div key={index} className=\"flex space-x-3\" data-testid={`transcription-${index}`}>\n                <div \n                  className={`w-8 h-8 ${getSpeakerColorClass(transcription.speakerColor)} rounded-full flex items-center justify-center flex-shrink-0`}\n                  data-testid={`speaker-avatar-${index}`}\n                >\n                  <span className=\"text-xs font-medium text-white\">\n                    {transcription.speakerInitials}\n                  </span>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <span className=\"font-medium text-foreground\" data-testid={`speaker-name-${index}`}>\n                      {transcription.speakerName}\n                    </span>\n                    <span className=\"text-xs text-muted-foreground\" data-testid={`message-time-${index}`}>\n                      {transcription.timestamp.toLocaleTimeString()}\n                    </span>\n                    {transcription.isStreaming && (\n                      <span className=\"text-xs bg-primary/10 text-primary px-2 py-0.5 rounded-full\">\n                        Live\n                      </span>\n                    )}\n                  </div>\n                  <p \n                    className={`text-foreground ${transcription.isStreaming ? 'streaming-text' : ''}`}\n                    data-testid={`message-content-${index}`}\n                  >\n                    {transcription.content}\n                  </p>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        \n        {/* Chat Input */}\n        {onSendMessage && (\n          <div className=\"p-4 border-t border-border\">\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"text\"\n                value={chatMessage}\n                onChange={(e) => setChatMessage(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                placeholder=\"Ask MeetingFlow AI a question...\"\n                className=\"flex-1 px-3 py-2 border border-input rounded-md bg-background text-foreground text-sm\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button \n                onClick={handleSendMessage}\n                disabled={!chatMessage.trim()}\n                data-testid=\"button-send-message\"\n              >\n                Send\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        {/* Transcription Controls */}\n        <div className=\"p-4 border-t border-border bg-muted/50\">\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Mic className=\"w-4 h-4 text-accent\" />\n              <span className=\"text-muted-foreground\" data-testid=\"audio-quality\">\n                Audio quality: Excellent\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4 text-secondary\" />\n              <span className=\"text-muted-foreground\" data-testid=\"speaker-count\">\n                {meetingStatus.speakerCount} speakers detected\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Languages className=\"w-4 h-4 text-primary\" />\n              <span className=\"text-muted-foreground\" data-testid=\"language\">\n                Language: English (US)\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7171},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-transcription.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useWebSocket } from './use-websocket';\nimport type { Transcription, ActionItem, WSMessage } from '@shared/schema';\n\nexport interface TranscriptionMessage extends Omit<Transcription, 'id' | 'timestamp'> {\n  timestamp: Date;\n}\n\nexport function useTranscription(meetingId?: string) {\n  const [transcriptions, setTranscriptions] = useState<TranscriptionMessage[]>([]);\n  const [actionItems, setActionItems] = useState<ActionItem[]>([]);\n  const [meetingStatus, setMeetingStatus] = useState<{\n    status: string;\n    duration: number;\n    speakerCount: number;\n  }>({\n    status: 'active',\n    duration: 0,\n    speakerCount: 1\n  });\n\n  const handleMessage = useCallback((message: WSMessage) => {\n    switch (message.type) {\n      case 'transcription':\n        const transcriptionData = message.data;\n        \n        if (transcriptionData.isStreaming) {\n          // Update existing streaming message\n          setTranscriptions(prev => {\n            const filtered = prev.filter(t => !t.isStreaming || t.speakerName !== transcriptionData.speakerName);\n            return [...filtered, {\n              ...transcriptionData,\n              timestamp: new Date()\n            }];\n          });\n        } else {\n          // Add completed transcription\n          setTranscriptions(prev => {\n            const filtered = prev.filter(t => !t.isStreaming);\n            return [...filtered, {\n              ...transcriptionData,\n              timestamp: new Date()\n            }];\n          });\n        }\n        break;\n\n      case 'action_item':\n        setActionItems(prev => {\n          // Check if action item already exists to avoid duplicates\n          const exists = prev.some(item => \n            item.title === message.data.title && \n            item.meetingId === message.data.meetingId\n          );\n          \n          if (!exists) {\n            return [...prev, {\n              id: `action_${Date.now()}_${Math.random()}`,\n              extractedAt: new Date(),\n              ...message.data,\n              description: message.data.description || null,\n              status: message.data.status || null,\n              assignedTo: message.data.assignedTo || null,\n              dueDate: message.data.dueDate || null,\n              isCompleted: message.data.isCompleted || null\n            }];\n          }\n          \n          return prev;\n        });\n        break;\n\n      case 'meeting_status':\n        if (message.data.meetingId === meetingId) {\n          setMeetingStatus({\n            status: message.data.status,\n            duration: message.data.duration,\n            speakerCount: message.data.speakerCount\n          });\n        }\n        break;\n\n      case 'error':\n        console.error('Transcription error:', message.data.message);\n        break;\n    }\n  }, [meetingId]);\n\n  const { \n    connectionState, \n    activeUsers, \n    joinMeeting, \n    sendAudioStream, \n    sendTextStream, \n    sendChatMessage, \n    stopMeeting,\n    isConnected \n  } = useWebSocket({\n    onMessage: handleMessage\n  });\n\n  const startMeeting = useCallback(() => {\n    if (meetingId && isConnected) {\n      joinMeeting(meetingId);\n    }\n  }, [meetingId, isConnected, joinMeeting]);\n\n  const sendAudio = useCallback((audioText: string) => {\n    if (isConnected) {\n      return sendAudioStream(audioText);\n    }\n    return false;\n  }, [isConnected, sendAudioStream]);\n\n  const sendStreamingText = useCallback((partialText: string, speakerInfo: any) => {\n    if (isConnected) {\n      return sendTextStream(partialText, speakerInfo);\n    }\n    return false;\n  }, [isConnected, sendTextStream]);\n\n  const sendMessage = useCallback((content: string) => {\n    if (isConnected) {\n      return sendChatMessage(content);\n    }\n    return false;\n  }, [isConnected, sendChatMessage]);\n\n  const endMeeting = useCallback(() => {\n    if (meetingId && isConnected) {\n      return stopMeeting(meetingId);\n    }\n    return false;\n  }, [meetingId, isConnected, stopMeeting]);\n\n  const toggleActionItem = useCallback((actionItemId: string) => {\n    setActionItems(prev => \n      prev.map(item => \n        item.id === actionItemId \n          ? { ...item, isCompleted: !item.isCompleted, status: item.isCompleted ? 'pending' : 'completed' }\n          : item\n      )\n    );\n  }, []);\n\n  const formatDuration = useCallback((seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Auto-join meeting when connected and meetingId is available\n  useEffect(() => {\n    if (isConnected && meetingId) {\n      startMeeting();\n    }\n  }, [isConnected, meetingId, startMeeting]);\n\n  return {\n    transcriptions,\n    actionItems,\n    meetingStatus,\n    connectionState,\n    activeUsers,\n    isConnected,\n    startMeeting,\n    sendAudio,\n    sendStreamingText,\n    sendMessage,\n    endMeeting,\n    toggleActionItem,\n    formatDuration\n  };\n}\n","size_bytes":5167},"client/src/hooks/use-websocket.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { WebSocketClient, type ConnectionState } from '@/lib/websocket-client';\nimport type { WSMessage } from '@shared/schema';\n\nexport interface UseWebSocketOptions {\n  onMessage?: (message: WSMessage) => void;\n  onError?: (error: Error) => void;\n  autoConnect?: boolean;\n}\n\nexport function useWebSocket(options: UseWebSocketOptions = {}) {\n  const [connectionState, setConnectionState] = useState<ConnectionState>('disconnected');\n  const [lastMessage, setLastMessage] = useState<WSMessage | null>(null);\n  const [activeUsers, setActiveUsers] = useState<number>(0);\n  const wsClient = useRef<WebSocketClient | null>(null);\n\n  const { onMessage, onError, autoConnect = true } = options;\n\n  const handleMessage = useCallback((message: WSMessage) => {\n    setLastMessage(message);\n    \n    // Handle connection status updates\n    if (message.type === 'connection_status') {\n      setActiveUsers(message.data.activeUsers);\n    }\n    \n    // Call custom message handler\n    onMessage?.(message);\n  }, [onMessage]);\n\n  const handleError = useCallback((error: Error) => {\n    console.error('WebSocket error:', error);\n    onError?.(error);\n  }, [onError]);\n\n  const connect = useCallback(() => {\n    if (wsClient.current) {\n      wsClient.current.connect();\n    }\n  }, []);\n\n  const disconnect = useCallback(() => {\n    if (wsClient.current) {\n      wsClient.current.disconnect();\n    }\n  }, []);\n\n  const sendMessage = useCallback((message: any) => {\n    if (wsClient.current) {\n      return wsClient.current.send(message);\n    }\n    return false;\n  }, []);\n\n  const joinMeeting = useCallback((meetingId: string) => {\n    return sendMessage({\n      type: 'join_meeting',\n      meetingId\n    });\n  }, [sendMessage]);\n\n  const sendAudioStream = useCallback((audioText: string) => {\n    return sendMessage({\n      type: 'audio_stream',\n      audioText\n    });\n  }, [sendMessage]);\n\n  const sendTextStream = useCallback((partialText: string, speakerInfo: any) => {\n    return sendMessage({\n      type: 'text_stream',\n      partialText,\n      speakerInfo\n    });\n  }, [sendMessage]);\n\n  const sendChatMessage = useCallback((content: string) => {\n    return sendMessage({\n      type: 'chat_message',\n      content\n    });\n  }, [sendMessage]);\n\n  const stopMeeting = useCallback((meetingId: string) => {\n    return sendMessage({\n      type: 'stop_meeting',\n      meetingId\n    });\n  }, [sendMessage]);\n\n  useEffect(() => {\n    // Initialize WebSocket client\n    wsClient.current = new WebSocketClient({\n      onMessage: handleMessage,\n      onStateChange: setConnectionState,\n      onError: handleError,\n      reconnectInterval: 3000,\n      maxReconnectAttempts: 5\n    });\n\n    // Auto-connect if enabled\n    if (autoConnect) {\n      wsClient.current.connect();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (wsClient.current) {\n        wsClient.current.disconnect();\n      }\n    };\n  }, [handleMessage, handleError, autoConnect]);\n\n  return {\n    connectionState,\n    lastMessage,\n    activeUsers,\n    connect,\n    disconnect,\n    sendMessage,\n    joinMeeting,\n    sendAudioStream,\n    sendTextStream,\n    sendChatMessage,\n    stopMeeting,\n    isConnected: connectionState === 'connected',\n    isConnecting: connectionState === 'connecting',\n    isDisconnected: connectionState === 'disconnected',\n    hasError: connectionState === 'error'\n  };\n}\n","size_bytes":3419},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket-client.ts":{"content":"import type { WSMessage } from \"@shared/schema\";\n\nexport type ConnectionState = 'connecting' | 'connected' | 'disconnected' | 'error';\n\nexport interface WebSocketClientOptions {\n  onMessage?: (message: WSMessage) => void;\n  onStateChange?: (state: ConnectionState) => void;\n  onError?: (error: Error) => void;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n}\n\nexport class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private state: ConnectionState = 'disconnected';\n  private reconnectAttempts = 0;\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private options: Required<WebSocketClientOptions>;\n  private url: string;\n\n  constructor(options: WebSocketClientOptions = {}) {\n    this.options = {\n      onMessage: () => {},\n      onStateChange: () => {},\n      onError: () => {},\n      reconnectInterval: 3000,\n      maxReconnectAttempts: 5,\n      ...options\n    };\n\n    // Construct WebSocket URL\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    this.url = `${protocol}//${window.location.host}/ws`;\n  }\n\n  connect(): void {\n    if (this.state === 'connecting' || this.state === 'connected') {\n      return;\n    }\n\n    this.setState('connecting');\n\n    try {\n      this.ws = new WebSocket(this.url);\n      this.setupEventHandlers();\n    } catch (error) {\n      this.handleError(new Error(`Failed to create WebSocket: ${error}`));\n    }\n  }\n\n  disconnect(): void {\n    this.clearReconnectTimer();\n    \n    if (this.ws) {\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = null;\n    }\n    \n    this.setState('disconnected');\n  }\n\n  send(message: any): boolean {\n    if (this.state !== 'connected' || !this.ws) {\n      console.warn('WebSocket not connected, message not sent:', message);\n      return false;\n    }\n\n    try {\n      this.ws.send(JSON.stringify(message));\n      return true;\n    } catch (error) {\n      this.handleError(new Error(`Failed to send message: ${error}`));\n      return false;\n    }\n  }\n\n  getState(): ConnectionState {\n    return this.state;\n  }\n\n  private setupEventHandlers(): void {\n    if (!this.ws) return;\n\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n      this.setState('connected');\n      \n      // Send ping to establish connection\n      this.send({ type: 'ping' });\n    };\n\n    this.ws.onclose = (event) => {\n      console.log('WebSocket closed:', event.code, event.reason);\n      this.ws = null;\n      \n      if (event.code !== 1000) { // Not a normal closure\n        this.attemptReconnect();\n      } else {\n        this.setState('disconnected');\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      this.handleError(new Error('WebSocket connection error'));\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const message: WSMessage = JSON.parse(event.data);\n        this.options.onMessage(message);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n        this.handleError(new Error(`Invalid message format: ${error}`));\n      }\n    };\n  }\n\n  private setState(newState: ConnectionState): void {\n    if (this.state !== newState) {\n      this.state = newState;\n      this.options.onStateChange(newState);\n    }\n  }\n\n  private handleError(error: Error): void {\n    console.error('WebSocket client error:', error);\n    this.setState('error');\n    this.options.onError(error);\n    \n    // Attempt to reconnect on error\n    this.attemptReconnect();\n  }\n\n  private attemptReconnect(): void {\n    if (this.reconnectAttempts >= this.options.maxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      this.setState('error');\n      return;\n    }\n\n    this.reconnectAttempts++;\n    console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.options.maxReconnectAttempts})...`);\n    \n    this.setState('connecting');\n    \n    this.reconnectTimer = setTimeout(() => {\n      this.connect();\n    }, this.options.reconnectInterval);\n  }\n\n  private clearReconnectTimer(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n}\n","size_bytes":4214},"client/src/pages/action-items.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Header } from '@/components/header';\nimport { Sidebar } from '@/components/sidebar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { \n  Search, \n  Filter, \n  CheckSquare, \n  Square, \n  Calendar, \n  User, \n  Plus,\n  ExternalLink,\n  Trash2\n} from 'lucide-react';\nimport { SiNotion, SiTrello, SiSlack } from 'react-icons/si';\nimport { Mail } from 'lucide-react';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { ActionItem, Meeting } from '@shared/schema';\n\nexport default function ActionItemsPage() {\n  const [currentUser] = useState({\n    id: \"user_1\",\n    name: \"John Smith\",\n    initials: \"JS\",\n    role: \"Newsletter Publisher\"\n  });\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [filterAssignee, setFilterAssignee] = useState<string>('all');\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n\n  const { connectionState, activeUsers } = useWebSocket({ autoConnect: false });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all meetings to get action items\n  const { data: meetings = [], isLoading: meetingsLoading } = useQuery({\n    queryKey: ['/api/users', currentUser.id, 'meetings'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/users/${currentUser.id}/meetings`);\n      return response.json();\n    }\n  });\n\n  // Fetch action items for all meetings\n  const { data: allActionItems = [], isLoading: itemsLoading } = useQuery({\n    queryKey: ['/api/action-items'],\n    queryFn: async () => {\n      const items: ActionItem[] = [];\n      for (const meeting of meetings) {\n        try {\n          const response = await apiRequest('GET', `/api/meetings/${meeting.id}/action-items`);\n          const meetingItems = await response.json();\n          items.push(...meetingItems);\n        } catch (error) {\n          console.error(`Failed to fetch action items for meeting ${meeting.id}:`, error);\n        }\n      }\n      return items;\n    },\n    enabled: meetings.length > 0\n  });\n\n  // Update action item mutation\n  const updateActionItemMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<ActionItem> }) => {\n      const response = await apiRequest('PATCH', `/api/action-items/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/action-items'] });\n      toast({\n        title: \"Action Item Updated\",\n        description: \"Changes saved successfully\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update action item\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const filteredItems = allActionItems.filter((item: ActionItem) => {\n    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = filterStatus === 'all' || \n                         (filterStatus === 'completed' && item.isCompleted) ||\n                         (filterStatus === 'pending' && !item.isCompleted);\n    const matchesAssignee = filterAssignee === 'all' || item.assignedTo === filterAssignee;\n    \n    return matchesSearch && matchesStatus && matchesAssignee;\n  });\n\n  const uniqueAssignees = Array.from(new Set(\n    allActionItems.filter((item: ActionItem) => item.assignedTo)\n      .map((item: ActionItem) => item.assignedTo)\n  ));\n\n  const handleToggleItem = (itemId: string) => {\n    const item = allActionItems.find((item: ActionItem) => item.id === itemId);\n    if (item) {\n      updateActionItemMutation.mutate({\n        id: itemId,\n        updates: { \n          isCompleted: !item.isCompleted,\n          status: !item.isCompleted ? 'completed' : 'pending'\n        }\n      });\n    }\n  };\n\n  const handleSelectItem = (itemId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedItems([...selectedItems, itemId]);\n    } else {\n      setSelectedItems(selectedItems.filter(id => id !== itemId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedItems(filteredItems.map((item: ActionItem) => item.id));\n    } else {\n      setSelectedItems([]);\n    }\n  };\n\n  const handleBulkComplete = () => {\n    selectedItems.forEach(itemId => {\n      const item = allActionItems.find((item: ActionItem) => item.id === itemId);\n      if (item && !item.isCompleted) {\n        updateActionItemMutation.mutate({\n          id: itemId,\n          updates: { isCompleted: true, status: 'completed' }\n        });\n      }\n    });\n    setSelectedItems([]);\n  };\n\n  const handleExportTo = async (platform: string) => {\n    try {\n      const exportData = {\n        platform,\n        actionItems: selectedItems.length > 0 \n          ? allActionItems.filter((item: ActionItem) => selectedItems.includes(item.id))\n          : filteredItems,\n        exportedAt: new Date().toISOString()\n      };\n\n      toast({\n        title: \"Export Started\",\n        description: `Exporting ${exportData.actionItems.length} action items to ${platform}`\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: `Failed to export to ${platform}`,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const exportPlatforms = [\n    { name: 'notion', label: 'Notion', icon: SiNotion, color: 'text-black' },\n    { name: 'trello', label: 'Trello', icon: SiTrello, color: 'text-blue-600' },\n    { name: 'slack', label: 'Slack', icon: SiSlack, color: 'text-purple-600' },\n    { name: 'email', label: 'Email', icon: Mail, color: 'text-red-500' }\n  ];\n\n  const completedCount = allActionItems.filter((item: ActionItem) => item.isCompleted).length;\n  const pendingCount = allActionItems.filter((item: ActionItem) => !item.isCompleted).length;\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"action-items-page\">\n      <Sidebar \n        connectionStatus={{\n          isConnected: connectionState === 'connected',\n          activeUsers\n        }}\n      />\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <Header user={currentUser} activeUsers={activeUsers} />\n        \n        <div className=\"p-6\">\n          <div className=\"mb-6\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"page-title\">\n              Action Items\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"page-description\">\n              Manage and track action items from all your meetings\n            </p>\n          </div>\n\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Items</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-items\">\n                  {allActionItems.length}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Pending</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-pending-items\">\n                  {pendingCount}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Completed</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-completed-items\">\n                  {completedCount}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Completion Rate</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-completion-rate\">\n                  {allActionItems.length > 0 ? Math.round((completedCount / allActionItems.length) * 100) : 0}%\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filters and Actions */}\n          <div className=\"flex flex-wrap gap-4 mb-6\">\n            <div className=\"relative flex-1 min-w-64\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search action items...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-items\"\n              />\n            </div>\n            \n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n              data-testid=\"select-filter-status\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n\n            <select\n              value={filterAssignee}\n              onChange={(e) => setFilterAssignee(e.target.value)}\n              className=\"px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n              data-testid=\"select-filter-assignee\"\n            >\n              <option value=\"all\">All Assignees</option>\n              {uniqueAssignees.map((assignee) => (\n                <option key={assignee || 'unassigned'} value={assignee || ''}>\n                  {assignee || 'Unassigned'}\n                </option>\n              ))}\n            </select>\n\n            {selectedItems.length > 0 && (\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={handleBulkComplete}\n                  data-testid=\"button-bulk-complete\"\n                >\n                  Mark Complete ({selectedItems.length})\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setSelectedItems([])}\n                  data-testid=\"button-clear-selection\"\n                >\n                  Clear Selection\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Bulk Actions */}\n          {selectedItems.length > 0 && (\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">\n                    {selectedItems.length} items selected\n                  </span>\n                  <div className=\"flex gap-2\">\n                    {exportPlatforms.map((platform) => {\n                      const IconComponent = platform.icon;\n                      return (\n                        <Button\n                          key={platform.name}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleExportTo(platform.name)}\n                          data-testid={`button-export-${platform.name}`}\n                        >\n                          <IconComponent className={`w-4 h-4 mr-1 ${platform.color}`} />\n                          {platform.label}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Items List */}\n          <div className=\"space-y-4\" data-testid=\"action-items-list\">\n            {itemsLoading || meetingsLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Loading action items...\n              </div>\n            ) : filteredItems.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-action-items\">\n                {searchTerm || filterStatus !== 'all' || filterAssignee !== 'all'\n                  ? 'No action items match your filters'\n                  : 'No action items found. They will appear here as meetings generate them automatically.'\n                }\n              </div>\n            ) : (\n              <>\n                {/* Select All Header */}\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <Checkbox\n                        checked={filteredItems.length > 0 && selectedItems.length === filteredItems.length}\n                        onCheckedChange={handleSelectAll}\n                        data-testid=\"checkbox-select-all\"\n                      />\n                      <span className=\"font-medium\">\n                        Select all {filteredItems.length} items\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {filteredItems.map((item: ActionItem) => {\n                  const meeting = meetings.find((m: Meeting) => m.id === item.meetingId);\n                  const isSelected = selectedItems.includes(item.id);\n                  \n                  return (\n                    <Card key={item.id} className={`transition-all ${isSelected ? 'ring-2 ring-primary' : ''}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start gap-3\">\n                          <Checkbox\n                            checked={isSelected}\n                            onCheckedChange={(checked) => handleSelectItem(item.id, checked as boolean)}\n                            data-testid={`checkbox-select-${item.id}`}\n                          />\n                          \n                          <button\n                            onClick={() => handleToggleItem(item.id)}\n                            className=\"mt-1 text-muted-foreground hover:text-foreground\"\n                            data-testid={`button-toggle-${item.id}`}\n                          >\n                            {item.isCompleted ? (\n                              <CheckSquare className=\"w-5 h-5 text-green-600\" />\n                            ) : (\n                              <Square className=\"w-5 h-5\" />\n                            )}\n                          </button>\n\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <h3 \n                                className={`font-medium ${item.isCompleted ? 'line-through text-muted-foreground' : 'text-foreground'}`}\n                                data-testid={`item-title-${item.id}`}\n                              >\n                                {item.title}\n                              </h3>\n                              <Badge \n                                className={item.isCompleted ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}\n                                data-testid={`item-status-${item.id}`}\n                              >\n                                {item.isCompleted ? 'Completed' : 'Pending'}\n                              </Badge>\n                            </div>\n\n                            {item.description && (\n                              <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`item-description-${item.id}`}>\n                                {item.description}\n                              </p>\n                            )}\n\n                            <div className=\"flex items-center gap-6 text-xs text-muted-foreground\">\n                              {meeting && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Calendar className=\"w-3 h-3\" />\n                                  <span data-testid={`item-meeting-${item.id}`}>\n                                    {meeting.title}\n                                  </span>\n                                </div>\n                              )}\n                              \n                              {item.assignedTo && (\n                                <div className=\"flex items-center gap-1\">\n                                  <User className=\"w-3 h-3\" />\n                                  <span data-testid={`item-assignee-${item.id}`}>\n                                    {item.assignedTo}\n                                  </span>\n                                </div>\n                              )}\n                              \n                              {item.dueDate && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Calendar className=\"w-3 h-3\" />\n                                  <span data-testid={`item-due-${item.id}`}>\n                                    Due: {item.dueDate}\n                                  </span>\n                                </div>\n                              )}\n\n                              {item.extractedAt && (\n                                <div className=\"flex items-center gap-1\">\n                                  <span data-testid={`item-extracted-${item.id}`}>\n                                    Extracted: {new Date(item.extractedAt).toLocaleDateString()}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":18726},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Header } from '@/components/header';\nimport { Sidebar } from '@/components/sidebar';\nimport { TranscriptionPanel } from '@/components/transcription-panel';\nimport { ActionItemsPanel } from '@/components/action-items-panel';\nimport { useTranscription } from '@/hooks/use-transcription';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function Dashboard() {\n  const [currentUser] = useState({\n    id: \"user_1\",\n    name: \"John Smith\",\n    initials: \"JS\",\n    role: \"Newsletter Publisher\"\n  });\n\n  const [currentMeeting, setCurrentMeeting] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const {\n    transcriptions,\n    actionItems,\n    meetingStatus,\n    connectionState,\n    activeUsers,\n    isConnected,\n    startMeeting,\n    sendAudio,\n    sendStreamingText,\n    sendMessage,\n    endMeeting,\n    toggleActionItem,\n    formatDuration\n  } = useTranscription(currentMeeting || undefined);\n\n  // Create a new meeting on component mount\n  useEffect(() => {\n    const createMeeting = async () => {\n      try {\n        const response = await apiRequest('POST', '/api/meetings', {\n          userId: currentUser.id,\n          title: `Meeting ${new Date().toLocaleDateString()}`,\n          status: 'active'\n        });\n        \n        const meeting = await response.json();\n        setCurrentMeeting(meeting.id);\n        \n        toast({\n          title: \"Meeting Started\",\n          description: \"Ready for real-time transcription\"\n        });\n      } catch (error) {\n        console.error('Failed to create meeting:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to start meeting\",\n          variant: \"destructive\"\n        });\n      }\n    };\n\n    createMeeting();\n  }, [currentUser.id, toast]);\n\n  const handleStopRecording = async () => {\n    if (currentMeeting) {\n      try {\n        await apiRequest('PATCH', `/api/meetings/${currentMeeting}`, {\n          status: 'completed'\n        });\n        \n        endMeeting();\n        \n        toast({\n          title: \"Meeting Ended\",\n          description: \"Transcription completed and insights generated\"\n        });\n      } catch (error) {\n        console.error('Failed to stop meeting:', error);\n        toast({\n          title: \"Error\", \n          description: \"Failed to stop meeting\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  const handlePauseRecording = async () => {\n    if (currentMeeting) {\n      try {\n        await apiRequest('PATCH', `/api/meetings/${currentMeeting}`, {\n          status: 'paused'\n        });\n        \n        toast({\n          title: \"Recording Paused\",\n          description: \"Transcription temporarily paused\"\n        });\n      } catch (error) {\n        console.error('Failed to pause meeting:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to pause recording\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  const handleExportActionItems = async () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Action items are being exported to your task manager\"\n    });\n  };\n\n  const handleExportTo = async (platform: string) => {\n    if (!currentMeeting) return;\n\n    try {\n      const response = await apiRequest('POST', `/api/meetings/${currentMeeting}/export`, {\n        platform\n      });\n      \n      const result = await response.json();\n      \n      toast({\n        title: \"Export Successful\",\n        description: result.message\n      });\n    } catch (error) {\n      console.error(`Failed to export to ${platform}:`, error);\n      toast({\n        title: \"Export Failed\",\n        description: `Failed to export to ${platform}`,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Simulate audio input for demo purposes\n  useEffect(() => {\n    if (!isConnected || !currentMeeting) return;\n\n    const demoMessages = [\n      { \n        speaker: 'Alice Miller',\n        initials: 'AM',\n        color: 'bg-blue-500',\n        text: 'Welcome everyone to today\\'s newsletter planning meeting. We need to discuss our Q4 content strategy and finalize the holiday campaign timeline.'\n      },\n      {\n        speaker: 'Bob Johnson',\n        initials: 'BJ', \n        color: 'bg-green-500',\n        text: 'Great, I\\'ve prepared the analytics from our last three campaigns. We should definitely focus on the segments that performed best - our tech review content had 45% higher open rates.'\n      },\n      {\n        speaker: 'Carol Martinez',\n        initials: 'CM',\n        color: 'bg-purple-500',\n        text: 'That\\'s excellent data. I think we should also look at integrating more interactive content this quarter. Maybe we can schedule a follow-up meeting to discuss the technical implementation.'\n      }\n    ];\n\n    let messageIndex = 0;\n    const interval = setInterval(() => {\n      if (messageIndex < demoMessages.length) {\n        const message = demoMessages[messageIndex];\n        \n        // Simulate streaming text\n        let charIndex = 0;\n        const streamInterval = setInterval(() => {\n          if (charIndex < message.text.length) {\n            const partialText = message.text.substring(0, charIndex + 1);\n            sendStreamingText(partialText, {\n              name: message.speaker,\n              initials: message.initials,\n              color: message.color\n            });\n            charIndex += 5; // Add 5 characters at a time\n          } else {\n            clearInterval(streamInterval);\n            // Send final complete message\n            sendAudio(message.text);\n          }\n        }, 100);\n        \n        messageIndex++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 8000); // New message every 8 seconds\n\n    return () => clearInterval(interval);\n  }, [isConnected, currentMeeting, sendAudio, sendStreamingText]);\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"dashboard\">\n      <Sidebar \n        connectionStatus={{\n          isConnected,\n          activeUsers\n        }}\n      />\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <Header user={currentUser} activeUsers={activeUsers} />\n        \n        <div className=\"flex h-[calc(100vh-80px)]\">\n          <TranscriptionPanel\n            transcriptions={transcriptions}\n            meetingStatus={meetingStatus}\n            formatDuration={formatDuration}\n            onStopRecording={handleStopRecording}\n            onPauseRecording={handlePauseRecording}\n            onSendMessage={sendMessage}\n          />\n          \n          <ActionItemsPanel\n            actionItems={actionItems}\n            onToggleActionItem={toggleActionItem}\n            onExportActionItems={handleExportActionItems}\n            onExportTo={handleExportTo}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":6884},"client/src/pages/integrations.tsx":{"content":"import { useState } from 'react';\nimport { Header } from '@/components/header';\nimport { Sidebar } from '@/components/sidebar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { \n  ExternalLink, \n  Plus, \n  Settings, \n  Check, \n  AlertCircle,\n  Zap,\n  Globe,\n  Shield,\n  Clock,\n  MessageSquare\n} from 'lucide-react';\nimport { SiNotion, SiTrello, SiSlack, SiGmail, SiZapier, SiGoogle } from 'react-icons/si';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Integrations() {\n  const [currentUser] = useState({\n    id: \"user_1\",\n    name: \"John Smith\",\n    initials: \"JS\",\n    role: \"Newsletter Publisher\"\n  });\n\n  const [integrations, setIntegrations] = useState([\n    {\n      id: 'notion',\n      name: 'Notion',\n      description: 'Sync action items and meeting notes to your Notion workspace',\n      icon: SiNotion,\n      color: 'text-black',\n      category: 'Productivity',\n      isConnected: false,\n      isPopular: true,\n      config: {\n        workspaceId: '',\n        databaseId: '',\n        autoSync: false\n      }\n    },\n    {\n      id: 'trello',\n      name: 'Trello',\n      description: 'Create cards from action items in your Trello boards',\n      icon: SiTrello,\n      color: 'text-blue-600',\n      category: 'Project Management',\n      isConnected: true,\n      isPopular: true,\n      config: {\n        boardId: 'newsletter-planning',\n        listId: 'action-items',\n        autoSync: true\n      }\n    },\n    {\n      id: 'slack',\n      name: 'Slack',\n      description: 'Send meeting summaries and action items to Slack channels',\n      icon: SiSlack,\n      color: 'text-purple-600',\n      category: 'Communication',\n      isConnected: true,\n      isPopular: true,\n      config: {\n        channelId: '#team-updates',\n        webhookUrl: 'https://hooks.slack.com/...',\n        autoSync: false\n      }\n    },\n    {\n      id: 'gmail',\n      name: 'Gmail',\n      description: 'Email meeting summaries and action items to team members',\n      icon: SiGmail,\n      color: 'text-red-500',\n      category: 'Communication',\n      isConnected: false,\n      isPopular: false,\n      config: {\n        emailTemplate: 'professional',\n        autoSend: false,\n        recipients: []\n      }\n    },\n    {\n      id: 'zapier',\n      name: 'Zapier',\n      description: 'Connect MeetingFlow to 5000+ apps through Zapier automation',\n      icon: SiZapier,\n      color: 'text-orange-500',\n      category: 'Automation',\n      isConnected: false,\n      isPopular: true,\n      config: {\n        webhookUrl: '',\n        triggerEvents: ['meeting_completed', 'action_item_created']\n      }\n    },\n    {\n      id: 'teams',\n      name: 'Microsoft Teams',\n      description: 'Share meeting insights and action items in Teams channels',\n      icon: MessageSquare,\n      color: 'text-blue-700',\n      category: 'Communication',\n      isConnected: false,\n      isPopular: false,\n      config: {\n        teamId: '',\n        channelId: '',\n        autoPost: false\n      }\n    },\n    {\n      id: 'calendar',\n      name: 'Google Calendar',\n      description: 'Create calendar events for action items with due dates',\n      icon: SiGoogle,\n      color: 'text-green-600',\n      category: 'Productivity',\n      isConnected: false,\n      isPopular: false,\n      config: {\n        calendarId: 'primary',\n        defaultDuration: '30m',\n        autoCreate: false\n      }\n    }\n  ]);\n\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { connectionState, activeUsers } = useWebSocket({ autoConnect: false });\n  const { toast } = useToast();\n\n  const categories = ['all', 'Productivity', 'Project Management', 'Communication', 'Automation'];\n\n  const filteredIntegrations = integrations.filter(integration => {\n    const matchesCategory = selectedCategory === 'all' || integration.category === selectedCategory;\n    const matchesSearch = integration.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         integration.description.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleToggleIntegration = (integrationId: string) => {\n    setIntegrations(prev => prev.map(integration => {\n      if (integration.id === integrationId) {\n        const newState = !integration.isConnected;\n        toast({\n          title: newState ? \"Integration Connected\" : \"Integration Disconnected\",\n          description: `${integration.name} has been ${newState ? 'connected' : 'disconnected'} successfully`\n        });\n        return { ...integration, isConnected: newState };\n      }\n      return integration;\n    }));\n  };\n\n  const handleConfigUpdate = (integrationId: string, configKey: string, value: any) => {\n    setIntegrations(prev => prev.map(integration => {\n      if (integration.id === integrationId) {\n        return {\n          ...integration,\n          config: { ...integration.config, [configKey]: value }\n        };\n      }\n      return integration;\n    }));\n  };\n\n  const connectedCount = integrations.filter(i => i.isConnected).length;\n  const popularIntegrations = integrations.filter(i => i.isPopular);\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"integrations-page\">\n      <Sidebar \n        connectionStatus={{\n          isConnected: connectionState === 'connected',\n          activeUsers\n        }}\n      />\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <Header user={currentUser} activeUsers={activeUsers} />\n        \n        <div className=\"p-6\">\n          <div className=\"mb-6\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"page-title\">\n              Integrations\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"page-description\">\n              Connect MeetingFlow with your favorite tools and automate your workflow\n            </p>\n          </div>\n\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Connected</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-connected\">\n                  {connectedCount}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Available</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-available\">\n                  {integrations.length}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Categories</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-categories\">\n                  {categories.length - 1}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Popular</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-popular\">\n                  {popularIntegrations.length}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Input\n                placeholder=\"Search integrations...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search-integrations\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              {categories.map(category => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  data-testid={`filter-${category.toLowerCase()}`}\n                >\n                  {category === 'all' ? 'All' : category}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-yellow-500\" />\n                Quick Setup\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 justify-start\"\n                  onClick={() => toast({ title: \"Coming Soon\", description: \"Auto-setup wizard is coming soon!\" })}\n                  data-testid=\"button-auto-setup\"\n                >\n                  <div className=\"text-left\">\n                    <div className=\"font-medium mb-1\">Auto-Setup Popular Apps</div>\n                    <div className=\"text-sm text-muted-foreground\">Connect Notion, Slack, and Trello in one click</div>\n                  </div>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 justify-start\"\n                  onClick={() => toast({ title: \"Coming Soon\", description: \"Import feature is coming soon!\" })}\n                  data-testid=\"button-import-config\"\n                >\n                  <div className=\"text-left\">\n                    <div className=\"font-medium mb-1\">Import Configuration</div>\n                    <div className=\"text-sm text-muted-foreground\">Import settings from another workspace</div>\n                  </div>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Integrations Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"integrations-grid\">\n            {filteredIntegrations.map((integration) => {\n              const IconComponent = integration.icon;\n              \n              return (\n                <Card key={integration.id} className=\"relative\">\n                  {integration.isPopular && (\n                    <Badge className=\"absolute -top-2 -right-2 bg-yellow-500 text-white\">\n                      Popular\n                    </Badge>\n                  )}\n                  \n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 rounded-lg border flex items-center justify-center\">\n                          <IconComponent className={`text-xl ${integration.color}`} />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\" data-testid={`integration-title-${integration.id}`}>\n                            {integration.name}\n                          </CardTitle>\n                          <Badge variant=\"outline\" className=\"text-xs\" data-testid={`integration-category-${integration.id}`}>\n                            {integration.category}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        {integration.isConnected ? (\n                          <Check className=\"w-5 h-5 text-green-600\" />\n                        ) : (\n                          <AlertCircle className=\"w-5 h-5 text-yellow-500\" />\n                        )}\n                        <Switch\n                          checked={integration.isConnected}\n                          onCheckedChange={() => handleToggleIntegration(integration.id)}\n                          data-testid={`switch-${integration.id}`}\n                        />\n                      </div>\n                    </div>\n                  </CardHeader>\n\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\" data-testid={`integration-description-${integration.id}`}>\n                      {integration.description}\n                    </p>\n\n                    {integration.isConnected && (\n                      <div className=\"space-y-3 p-3 bg-muted/50 rounded-md\">\n                        <div className=\"text-sm font-medium text-foreground\">Configuration</div>\n                        \n                        {integration.id === 'trello' && (\n                          <div className=\"space-y-2\">\n                            <div>\n                              <label className=\"text-xs text-muted-foreground\">Board ID</label>\n                              <Input\n                                value={integration.config.boardId}\n                                onChange={(e) => handleConfigUpdate(integration.id, 'boardId', e.target.value)}\n                                className=\"h-8 text-sm\"\n                                data-testid={`config-boardId-${integration.id}`}\n                              />\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-xs text-muted-foreground\">Auto-sync new items</span>\n                              <Switch\n                                checked={integration.config.autoSync}\n                                onCheckedChange={(checked) => handleConfigUpdate(integration.id, 'autoSync', checked)}\n                                data-testid={`config-autoSync-${integration.id}`}\n                              />\n                            </div>\n                          </div>\n                        )}\n\n                        {integration.id === 'slack' && (\n                          <div className=\"space-y-2\">\n                            <div>\n                              <label className=\"text-xs text-muted-foreground\">Channel</label>\n                              <Input\n                                value={integration.config.channelId}\n                                onChange={(e) => handleConfigUpdate(integration.id, 'channelId', e.target.value)}\n                                className=\"h-8 text-sm\"\n                                data-testid={`config-channelId-${integration.id}`}\n                              />\n                            </div>\n                          </div>\n                        )}\n\n                        {integration.id === 'notion' && (\n                          <div className=\"space-y-2\">\n                            <div>\n                              <label className=\"text-xs text-muted-foreground\">Database ID</label>\n                              <Input\n                                value={integration.config.databaseId}\n                                onChange={(e) => handleConfigUpdate(integration.id, 'databaseId', e.target.value)}\n                                className=\"h-8 text-sm\"\n                                placeholder=\"Enter Notion database ID\"\n                                data-testid={`config-databaseId-${integration.id}`}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n\n                    <div className=\"flex gap-2 mt-4\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        onClick={() => toast({ title: \"Settings\", description: `Opening ${integration.name} settings` })}\n                        data-testid={`button-settings-${integration.id}`}\n                      >\n                        <Settings className=\"w-4 h-4 mr-1\" />\n                        Settings\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open('#', '_blank')}\n                        data-testid={`button-docs-${integration.id}`}\n                      >\n                        <ExternalLink className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {filteredIntegrations.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-integrations\">\n              No integrations match your search criteria.\n            </div>\n          )}\n\n          {/* Help Section */}\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5 text-blue-500\" />\n                Security & Privacy\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div className=\"flex items-start gap-2\">\n                  <Shield className=\"w-4 h-4 text-green-600 mt-0.5\" />\n                  <div>\n                    <div className=\"font-medium\">Secure Connections</div>\n                    <div className=\"text-muted-foreground\">All integrations use OAuth 2.0 and encrypted connections</div>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <Globe className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                  <div>\n                    <div className=\"font-medium\">Data Privacy</div>\n                    <div className=\"text-muted-foreground\">Your data is never stored on third-party servers</div>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <Clock className=\"w-4 h-4 text-purple-600 mt-0.5\" />\n                  <div>\n                    <div className=\"font-medium\">Real-time Sync</div>\n                    <div className=\"text-muted-foreground\">Changes sync instantly across all connected apps</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":19112},"client/src/pages/meeting-history.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Header } from '@/components/header';\nimport { Sidebar } from '@/components/sidebar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Search, \n  Calendar, \n  Clock, \n  Users, \n  FileText, \n  CheckSquare,\n  TrendingUp,\n  Download,\n  Eye\n} from 'lucide-react';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Meeting } from '@shared/schema';\n\nexport default function MeetingHistory() {\n  const [currentUser] = useState({\n    id: \"user_1\",\n    name: \"John Smith\",\n    initials: \"JS\",\n    role: \"Newsletter Publisher\"\n  });\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n\n  const { connectionState, activeUsers } = useWebSocket({ autoConnect: false });\n\n  // Fetch meetings data\n  const { data: meetings = [], isLoading } = useQuery({\n    queryKey: ['/api/users', currentUser.id, 'meetings'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/users/${currentUser.id}/meetings`);\n      return response.json();\n    }\n  });\n\n  const filteredMeetings = meetings.filter((meeting: Meeting) => {\n    const matchesSearch = meeting.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter = filterStatus === 'all' || meeting.status === filterStatus;\n    return matchesSearch && matchesFilter;\n  });\n\n  const handleViewMeeting = (meetingId: string) => {\n    window.open(`/meeting/${meetingId}`, '_blank');\n  };\n\n  const handleExportMeeting = async (meetingId: string) => {\n    try {\n      const response = await apiRequest('POST', `/api/meetings/${meetingId}/export`, {\n        platform: 'json'\n      });\n      const result = await response.json();\n      \n      // Create download link\n      const dataStr = JSON.stringify(result.data, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `meeting-${meetingId}-export.json`;\n      link.click();\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  const formatDuration = (seconds: number | null) => {\n    if (!seconds) return '0:00';\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getStatusColor = (status: string | null) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'completed': return 'bg-blue-100 text-blue-800';\n      case 'paused': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"meeting-history\">\n      <Sidebar \n        connectionStatus={{\n          isConnected: connectionState === 'connected',\n          activeUsers\n        }}\n      />\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <Header user={currentUser} activeUsers={activeUsers} />\n        \n        <div className=\"p-6\">\n          <div className=\"mb-6\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"page-title\">\n              Meeting History\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"page-description\">\n              Review past meetings, transcriptions, and extracted insights\n            </p>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search meetings...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-meetings\"\n              />\n            </div>\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n              data-testid=\"select-filter-status\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"paused\">Paused</option>\n            </select>\n          </div>\n\n          {/* Analytics Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Meetings</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-meetings\">\n                  {meetings.length}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Completed</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-completed-meetings\">\n                  {meetings.filter((m: Meeting) => m.status === 'completed').length}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Duration</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-duration\">\n                  {formatDuration(meetings.reduce((acc: number, m: Meeting) => acc + (m.duration || 0), 0))}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">This Month</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-month-meetings\">\n                  {meetings.filter((m: Meeting) => {\n                    const meetingDate = new Date(m.startTime || '');\n                    const now = new Date();\n                    return meetingDate.getMonth() === now.getMonth() && \n                           meetingDate.getFullYear() === now.getFullYear();\n                  }).length}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Meetings List */}\n          <div className=\"space-y-4\" data-testid=\"meetings-list\">\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Loading meetings...\n              </div>\n            ) : filteredMeetings.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-meetings\">\n                {searchTerm || filterStatus !== 'all' \n                  ? 'No meetings match your search criteria'\n                  : 'No meetings found. Start your first meeting from the dashboard.'\n                }\n              </div>\n            ) : (\n              filteredMeetings.map((meeting: Meeting) => (\n                <Card key={meeting.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h3 className=\"font-semibold text-foreground\" data-testid={`meeting-title-${meeting.id}`}>\n                            {meeting.title}\n                          </h3>\n                          <Badge className={getStatusColor(meeting.status)} data-testid={`meeting-status-${meeting.id}`}>\n                            {meeting.status || 'unknown'}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-6 text-sm text-muted-foreground mb-3\">\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"w-4 h-4\" />\n                            <span data-testid={`meeting-date-${meeting.id}`}>\n                              {meeting.startTime ? new Date(meeting.startTime).toLocaleDateString() : 'No date'}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"w-4 h-4\" />\n                            <span data-testid={`meeting-duration-${meeting.id}`}>\n                              {formatDuration(meeting.duration)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Users className=\"w-4 h-4\" />\n                            <span data-testid={`meeting-speakers-${meeting.id}`}>\n                              {meeting.speakerCount || 0} speakers\n                            </span>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <FileText className=\"w-3 h-3\" />\n                            <span>Transcription Available</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <CheckSquare className=\"w-3 h-3\" />\n                            <span>Action Items Extracted</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <TrendingUp className=\"w-3 h-3\" />\n                            <span>AI Insights Generated</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2 ml-4\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleViewMeeting(meeting.id)}\n                          data-testid={`button-view-${meeting.id}`}\n                        >\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          View\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleExportMeeting(meeting.id)}\n                          data-testid={`button-export-${meeting.id}`}\n                        >\n                          <Download className=\"w-4 h-4 mr-1\" />\n                          Export\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":11934},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState } from 'react';\nimport { Header } from '@/components/header';\nimport { Sidebar } from '@/components/sidebar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  User, \n  Bell, \n  Shield, \n  Mic, \n  Palette, \n  Globe, \n  Database,\n  Download,\n  Trash2,\n  Save,\n  Key,\n  Volume2\n} from 'lucide-react';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Settings() {\n  const [currentUser, setCurrentUser] = useState({\n    id: \"user_1\",\n    name: \"John Smith\",\n    initials: \"JS\",\n    role: \"Newsletter Publisher\",\n    email: \"john.smith@example.com\",\n    timezone: \"America/New_York\"\n  });\n\n  const [settings, setSettings] = useState({\n    // Profile settings\n    profile: {\n      name: currentUser.name,\n      email: currentUser.email,\n      role: currentUser.role,\n      timezone: currentUser.timezone,\n      language: 'en-US'\n    },\n    // Notification settings\n    notifications: {\n      emailSummaries: true,\n      actionItemReminders: true,\n      meetingStarted: false,\n      weeklyReports: true,\n      mentionAlerts: true,\n      browserNotifications: true\n    },\n    // Audio & Recording settings\n    audio: {\n      autoRecord: true,\n      enhanceAudio: true,\n      speakerDetection: true,\n      backgroundNoiseReduction: true,\n      audioQuality: 'high',\n      microphoneGain: 75\n    },\n    // AI & Transcription settings\n    ai: {\n      autoActionItems: true,\n      sentimentAnalysis: true,\n      keywordExtraction: true,\n      summaryLength: 'medium',\n      confidenceThreshold: 85,\n      brandTone: 'professional'\n    },\n    // Privacy & Security settings\n    privacy: {\n      dataRetention: '90days',\n      shareAnalytics: false,\n      encryptTranscriptions: true,\n      autoDelete: false,\n      exportAccess: 'owner-only'\n    },\n    // Appearance settings\n    appearance: {\n      theme: 'system',\n      compactMode: false,\n      showTimestamps: true,\n      colorCodeSpeakers: true,\n      fontSize: 'medium'\n    }\n  });\n\n  const { connectionState, activeUsers } = useWebSocket({ autoConnect: false });\n  const { toast } = useToast();\n\n  const handleSettingChange = (category: string, key: string, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category as keyof typeof prev],\n        [key]: value\n      }\n    }));\n  };\n\n  const handleSaveSettings = () => {\n    // In a real app, this would send settings to the backend\n    toast({\n      title: \"Settings Saved\",\n      description: \"Your preferences have been updated successfully\"\n    });\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Your data export will be ready shortly\"\n    });\n  };\n\n  const handleDeleteAccount = () => {\n    toast({\n      title: \"Account Deletion\",\n      description: \"Please contact support to delete your account\",\n      variant: \"destructive\"\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"settings-page\">\n      <Sidebar \n        connectionStatus={{\n          isConnected: connectionState === 'connected',\n          activeUsers\n        }}\n      />\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <Header user={currentUser} activeUsers={activeUsers} />\n        \n        <div className=\"p-6\">\n          <div className=\"mb-6\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"page-title\">\n              Settings\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"page-description\">\n              Customize your MeetingFlow experience and manage your preferences\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-6\">\n              <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Profile\n              </TabsTrigger>\n              <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n                <Bell className=\"w-4 h-4 mr-2\" />\n                Notifications\n              </TabsTrigger>\n              <TabsTrigger value=\"audio\" data-testid=\"tab-audio\">\n                <Mic className=\"w-4 h-4 mr-2\" />\n                Audio\n              </TabsTrigger>\n              <TabsTrigger value=\"ai\" data-testid=\"tab-ai\">\n                <Palette className=\"w-4 h-4 mr-2\" />\n                AI & Analysis\n              </TabsTrigger>\n              <TabsTrigger value=\"privacy\" data-testid=\"tab-privacy\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Privacy\n              </TabsTrigger>\n              <TabsTrigger value=\"appearance\" data-testid=\"tab-appearance\">\n                <Globe className=\"w-4 h-4 mr-2\" />\n                Appearance\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Profile Tab */}\n            <TabsContent value=\"profile\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Profile Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Full Name</label>\n                      <Input\n                        value={settings.profile.name}\n                        onChange={(e) => handleSettingChange('profile', 'name', e.target.value)}\n                        data-testid=\"input-profile-name\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Email</label>\n                      <Input\n                        type=\"email\"\n                        value={settings.profile.email}\n                        onChange={(e) => handleSettingChange('profile', 'email', e.target.value)}\n                        data-testid=\"input-profile-email\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Role</label>\n                      <select\n                        value={settings.profile.role}\n                        onChange={(e) => handleSettingChange('profile', 'role', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n                        data-testid=\"select-profile-role\"\n                      >\n                        <option value=\"Newsletter Publisher\">Newsletter Publisher</option>\n                        <option value=\"Content Creator\">Content Creator</option>\n                        <option value=\"Marketing Manager\">Marketing Manager</option>\n                        <option value=\"Team Lead\">Team Lead</option>\n                        <option value=\"Other\">Other</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Timezone</label>\n                      <select\n                        value={settings.profile.timezone}\n                        onChange={(e) => handleSettingChange('profile', 'timezone', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n                        data-testid=\"select-profile-timezone\"\n                      >\n                        <option value=\"America/New_York\">Eastern Time</option>\n                        <option value=\"America/Chicago\">Central Time</option>\n                        <option value=\"America/Denver\">Mountain Time</option>\n                        <option value=\"America/Los_Angeles\">Pacific Time</option>\n                        <option value=\"Europe/London\">GMT</option>\n                        <option value=\"Europe/Paris\">Central European Time</option>\n                      </select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Notifications Tab */}\n            <TabsContent value=\"notifications\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Notification Preferences</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Email Summaries</div>\n                        <div className=\"text-sm text-muted-foreground\">Receive meeting summaries via email</div>\n                      </div>\n                      <Switch\n                        checked={settings.notifications.emailSummaries}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'emailSummaries', checked)}\n                        data-testid=\"switch-email-summaries\"\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Action Item Reminders</div>\n                        <div className=\"text-sm text-muted-foreground\">Get reminded about pending action items</div>\n                      </div>\n                      <Switch\n                        checked={settings.notifications.actionItemReminders}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'actionItemReminders', checked)}\n                        data-testid=\"switch-action-reminders\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Meeting Started</div>\n                        <div className=\"text-sm text-muted-foreground\">Notify when someone starts a meeting</div>\n                      </div>\n                      <Switch\n                        checked={settings.notifications.meetingStarted}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'meetingStarted', checked)}\n                        data-testid=\"switch-meeting-started\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Weekly Reports</div>\n                        <div className=\"text-sm text-muted-foreground\">Receive weekly productivity insights</div>\n                      </div>\n                      <Switch\n                        checked={settings.notifications.weeklyReports}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'weeklyReports', checked)}\n                        data-testid=\"switch-weekly-reports\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Browser Notifications</div>\n                        <div className=\"text-sm text-muted-foreground\">Show desktop notifications</div>\n                      </div>\n                      <Switch\n                        checked={settings.notifications.browserNotifications}\n                        onCheckedChange={(checked) => handleSettingChange('notifications', 'browserNotifications', checked)}\n                        data-testid=\"switch-browser-notifications\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Audio Tab */}\n            <TabsContent value=\"audio\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Audio & Recording Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Auto Record Meetings</div>\n                        <div className=\"text-sm text-muted-foreground\">Automatically start recording when meeting begins</div>\n                      </div>\n                      <Switch\n                        checked={settings.audio.autoRecord}\n                        onCheckedChange={(checked) => handleSettingChange('audio', 'autoRecord', checked)}\n                        data-testid=\"switch-auto-record\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Enhanced Audio Processing</div>\n                        <div className=\"text-sm text-muted-foreground\">Use AI to improve audio quality</div>\n                      </div>\n                      <Switch\n                        checked={settings.audio.enhanceAudio}\n                        onCheckedChange={(checked) => handleSettingChange('audio', 'enhanceAudio', checked)}\n                        data-testid=\"switch-enhance-audio\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Speaker Detection</div>\n                        <div className=\"text-sm text-muted-foreground\">Automatically identify different speakers</div>\n                      </div>\n                      <Switch\n                        checked={settings.audio.speakerDetection}\n                        onCheckedChange={(checked) => handleSettingChange('audio', 'speakerDetection', checked)}\n                        data-testid=\"switch-speaker-detection\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Audio Quality</label>\n                      <select\n                        value={settings.audio.audioQuality}\n                        onChange={(e) => handleSettingChange('audio', 'audioQuality', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n                        data-testid=\"select-audio-quality\"\n                      >\n                        <option value=\"low\">Low (faster processing)</option>\n                        <option value=\"medium\">Medium (balanced)</option>\n                        <option value=\"high\">High (best accuracy)</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <label className=\"text-sm font-medium\">Microphone Gain</label>\n                        <span className=\"text-sm text-muted-foreground\">{settings.audio.microphoneGain}%</span>\n                      </div>\n                      <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={settings.audio.microphoneGain}\n                        onChange={(e) => handleSettingChange('audio', 'microphoneGain', parseInt(e.target.value))}\n                        className=\"w-full\"\n                        data-testid=\"slider-microphone-gain\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* AI Tab */}\n            <TabsContent value=\"ai\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>AI & Analysis Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Auto Action Item Detection</div>\n                        <div className=\"text-sm text-muted-foreground\">Automatically extract action items from conversations</div>\n                      </div>\n                      <Switch\n                        checked={settings.ai.autoActionItems}\n                        onCheckedChange={(checked) => handleSettingChange('ai', 'autoActionItems', checked)}\n                        data-testid=\"switch-auto-action-items\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Sentiment Analysis</div>\n                        <div className=\"text-sm text-muted-foreground\">Analyze meeting tone and participant engagement</div>\n                      </div>\n                      <Switch\n                        checked={settings.ai.sentimentAnalysis}\n                        onCheckedChange={(checked) => handleSettingChange('ai', 'sentimentAnalysis', checked)}\n                        data-testid=\"switch-sentiment-analysis\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Keyword Extraction</div>\n                        <div className=\"text-sm text-muted-foreground\">Identify key topics and themes</div>\n                      </div>\n                      <Switch\n                        checked={settings.ai.keywordExtraction}\n                        onCheckedChange={(checked) => handleSettingChange('ai', 'keywordExtraction', checked)}\n                        data-testid=\"switch-keyword-extraction\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Summary Length</label>\n                      <select\n                        value={settings.ai.summaryLength}\n                        onChange={(e) => handleSettingChange('ai', 'summaryLength', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n                        data-testid=\"select-summary-length\"\n                      >\n                        <option value=\"brief\">Brief (1-2 sentences)</option>\n                        <option value=\"medium\">Medium (1 paragraph)</option>\n                        <option value=\"detailed\">Detailed (multiple paragraphs)</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Brand Tone</label>\n                      <select\n                        value={settings.ai.brandTone}\n                        onChange={(e) => handleSettingChange('ai', 'brandTone', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n                        data-testid=\"select-brand-tone\"\n                      >\n                        <option value=\"professional\">Professional</option>\n                        <option value=\"casual\">Casual</option>\n                        <option value=\"friendly\">Friendly</option>\n                        <option value=\"formal\">Formal</option>\n                        <option value=\"creative\">Creative</option>\n                      </select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Privacy Tab */}\n            <TabsContent value=\"privacy\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Privacy & Security</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Data Retention</label>\n                      <select\n                        value={settings.privacy.dataRetention}\n                        onChange={(e) => handleSettingChange('privacy', 'dataRetention', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n                        data-testid=\"select-data-retention\"\n                      >\n                        <option value=\"30days\">30 days</option>\n                        <option value=\"90days\">90 days</option>\n                        <option value=\"1year\">1 year</option>\n                        <option value=\"indefinite\">Indefinite</option>\n                      </select>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Encrypt Transcriptions</div>\n                        <div className=\"text-sm text-muted-foreground\">Use end-to-end encryption for all recordings</div>\n                      </div>\n                      <Switch\n                        checked={settings.privacy.encryptTranscriptions}\n                        onCheckedChange={(checked) => handleSettingChange('privacy', 'encryptTranscriptions', checked)}\n                        data-testid=\"switch-encrypt-transcriptions\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Share Usage Analytics</div>\n                        <div className=\"text-sm text-muted-foreground\">Help improve MeetingFlow by sharing anonymous usage data</div>\n                      </div>\n                      <Switch\n                        checked={settings.privacy.shareAnalytics}\n                        onCheckedChange={(checked) => handleSettingChange('privacy', 'shareAnalytics', checked)}\n                        data-testid=\"switch-share-analytics\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Auto Delete Old Meetings</div>\n                        <div className=\"text-sm text-muted-foreground\">Automatically delete meetings after retention period</div>\n                      </div>\n                      <Switch\n                        checked={settings.privacy.autoDelete}\n                        onCheckedChange={(checked) => handleSettingChange('privacy', 'autoDelete', checked)}\n                        data-testid=\"switch-auto-delete\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"pt-4 border-t\">\n                    <div className=\"space-y-3\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={handleExportData}\n                        className=\"w-full justify-start\"\n                        data-testid=\"button-export-data\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Export My Data\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        onClick={handleDeleteAccount}\n                        className=\"w-full justify-start\"\n                        data-testid=\"button-delete-account\"\n                      >\n                        <Trash2 className=\"w-4 h-4 mr-2\" />\n                        Delete Account\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Appearance Tab */}\n            <TabsContent value=\"appearance\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Appearance & Display</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Theme</label>\n                      <select\n                        value={settings.appearance.theme}\n                        onChange={(e) => handleSettingChange('appearance', 'theme', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n                        data-testid=\"select-theme\"\n                      >\n                        <option value=\"light\">Light</option>\n                        <option value=\"dark\">Dark</option>\n                        <option value=\"system\">System</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Font Size</label>\n                      <select\n                        value={settings.appearance.fontSize}\n                        onChange={(e) => handleSettingChange('appearance', 'fontSize', e.target.value)}\n                        className=\"w-full px-3 py-2 border border-input rounded-md bg-background text-foreground\"\n                        data-testid=\"select-font-size\"\n                      >\n                        <option value=\"small\">Small</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"large\">Large</option>\n                      </select>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Compact Mode</div>\n                        <div className=\"text-sm text-muted-foreground\">Use smaller spacing and elements</div>\n                      </div>\n                      <Switch\n                        checked={settings.appearance.compactMode}\n                        onCheckedChange={(checked) => handleSettingChange('appearance', 'compactMode', checked)}\n                        data-testid=\"switch-compact-mode\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Show Timestamps</div>\n                        <div className=\"text-sm text-muted-foreground\">Display time for each message</div>\n                      </div>\n                      <Switch\n                        checked={settings.appearance.showTimestamps}\n                        onCheckedChange={(checked) => handleSettingChange('appearance', 'showTimestamps', checked)}\n                        data-testid=\"switch-show-timestamps\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">Color Code Speakers</div>\n                        <div className=\"text-sm text-muted-foreground\">Use different colors for each speaker</div>\n                      </div>\n                      <Switch\n                        checked={settings.appearance.colorCodeSpeakers}\n                        onCheckedChange={(checked) => handleSettingChange('appearance', 'colorCodeSpeakers', checked)}\n                        data-testid=\"switch-color-speakers\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button onClick={handleSaveSettings} data-testid=\"button-save-settings\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save All Settings\n            </Button>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":28598},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/live-transcription.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Header } from '@/components/header';\nimport { Sidebar } from '@/components/sidebar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Mic, \n  MicOff, \n  Play, \n  Pause, \n  Square, \n  Settings, \n  Users, \n  Clock,\n  Volume2,\n  VolumeX,\n  MessageSquare,\n  CheckSquare,\n  Zap,\n  FileText,\n  Download\n} from 'lucide-react';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { useTranscription } from '@/hooks/use-transcription';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { WSMessage } from '@shared/schema';\n\ninterface MeetingStatus {\n  meetingId: string | null;\n  status: 'idle' | 'active' | 'paused' | 'completed';\n  duration: number;\n  speakerCount: number;\n  startTime: Date | null;\n}\n\nexport default function LiveTranscription() {\n  const [currentUser] = useState({\n    id: \"user_1\",\n    name: \"John Smith\",\n    initials: \"JS\",\n    role: \"Newsletter Publisher\"\n  });\n\n  const [meetingStatus, setMeetingStatus] = useState<MeetingStatus>({\n    meetingId: null,\n    status: 'idle',\n    duration: 0,\n    speakerCount: 0,\n    startTime: null\n  });\n\n  const [isMicrophoneEnabled, setIsMicrophoneEnabled] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioLevel, setAudioLevel] = useState(0);\n  const [actionItems, setActionItems] = useState<any[]>([]);\n  const [insights, setInsights] = useState<any>({});\n  const [chatMessages, setChatMessages] = useState<any[]>([]);\n  const [newChatMessage, setNewChatMessage] = useState('');\n\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // WebSocket connection with message handling\n  const { \n    connectionState, \n    activeUsers, \n    joinMeeting, \n    sendTextStream, \n    sendChatMessage, \n    stopMeeting,\n    lastMessage\n  } = useWebSocket({\n    onMessage: handleWebSocketMessage,\n    autoConnect: true\n  });\n\n  // Transcription management\n  const { \n    transcriptions, \n    actionItems: hookActionItems,\n    meetingStatus: hookMeetingStatus,\n    isConnected: hookIsConnected,\n    startMeeting: startTranscription,\n    endMeeting: stopTranscription,\n    sendStreamingText,\n    sendMessage: sendChatToServer\n  } = useTranscription(meetingStatus.meetingId || undefined);\n\n  // Handle incoming WebSocket messages\n  function handleWebSocketMessage(message: WSMessage) {\n    switch (message.type) {\n      case 'action_item':\n        setActionItems(prev => [...prev, message.data]);\n        toast({\n          title: \"New Action Item\",\n          description: message.data.title\n        });\n        break;\n      \n      case 'meeting_status':\n        setMeetingStatus(prev => ({\n          ...prev,\n          meetingId: message.data.meetingId,\n          status: message.data.status as any,\n          duration: message.data.duration,\n          speakerCount: message.data.speakerCount\n        }));\n        break;\n      \n      case 'error':\n        toast({\n          title: \"Meeting Error\",\n          description: message.data.message,\n          variant: \"destructive\"\n        });\n        break;\n    }\n  }\n\n  // Auto-scroll to bottom when new transcriptions arrive\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [transcriptions]);\n\n  // Format duration for display\n  const formatDuration = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Start a new meeting\n  const handleStartMeeting = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/meetings', {\n        title: `Live Meeting - ${new Date().toLocaleDateString()}`,\n        status: 'active'\n      });\n      const meeting = await response.json();\n      \n      setMeetingStatus({\n        meetingId: meeting.id,\n        status: 'active',\n        duration: 0,\n        speakerCount: 1,\n        startTime: new Date()\n      });\n\n      // Join the meeting via WebSocket\n      joinMeeting(meeting.id);\n      \n      // Start transcription\n      if (startTranscription) {\n        startTranscription();\n      }\n      setIsRecording(true);\n      \n      toast({\n        title: \"Meeting Started\",\n        description: \"Live transcription is now active\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Start Meeting\",\n        description: \"Could not initialize meeting session\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Pause/resume meeting\n  const handleTogglePause = () => {\n    if (meetingStatus.status === 'active') {\n      setMeetingStatus(prev => ({ ...prev, status: 'paused' }));\n      if (stopTranscription) {\n        stopTranscription();\n      }\n      setIsRecording(false);\n    } else if (meetingStatus.status === 'paused') {\n      setMeetingStatus(prev => ({ ...prev, status: 'active' }));\n      if (startTranscription) {\n        startTranscription();\n      }\n      setIsRecording(true);\n    }\n  };\n\n  // Stop meeting\n  const handleStopMeeting = async () => {\n    if (meetingStatus.meetingId) {\n      try {\n        await stopMeeting(meetingStatus.meetingId);\n        if (stopTranscription) {\n          stopTranscription();\n        }\n        \n        setMeetingStatus({\n          meetingId: null,\n          status: 'idle',\n          duration: 0,\n          speakerCount: 0,\n          startTime: null\n        });\n        setIsRecording(false);\n        \n        toast({\n          title: \"Meeting Ended\",\n          description: \"Transcription saved and meeting completed\"\n        });\n      } catch (error) {\n        toast({\n          title: \"Error Ending Meeting\",\n          description: \"There was an issue stopping the meeting\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  // Toggle microphone\n  const handleToggleMicrophone = () => {\n    setIsMicrophoneEnabled(!isMicrophoneEnabled);\n    if (!isMicrophoneEnabled) {\n      // Simulate microphone level\n      const interval = setInterval(() => {\n        setAudioLevel(Math.random() * 100);\n      }, 100);\n      setTimeout(() => clearInterval(interval), 5000);\n    }\n  };\n\n  // Send chat message\n  const handleSendChatMessage = () => {\n    if (newChatMessage.trim() && meetingStatus.meetingId) {\n      const message = {\n        id: Date.now().toString(),\n        content: newChatMessage,\n        sender: currentUser.name,\n        timestamp: new Date()\n      };\n      \n      setChatMessages(prev => [...prev, message]);\n      if (sendChatToServer) {\n        sendChatToServer(newChatMessage);\n      }\n      setNewChatMessage('');\n    }\n  };\n\n  // Simulate text input for testing\n  const handleTestTranscription = () => {\n    if (meetingStatus.meetingId) {\n      const testTexts = [\n        \"Let's discuss the quarterly newsletter performance metrics.\",\n        \"We need to focus on improving our subscriber engagement rates.\",\n        \"Action item: Create a content calendar for next month's campaigns.\",\n        \"The analytics show a 15% increase in open rates this quarter.\"\n      ];\n      \n      const randomText = testTexts[Math.floor(Math.random() * testTexts.length)];\n      if (sendStreamingText) {\n        sendStreamingText(randomText, {\n          speakerName: currentUser.name,\n          speakerInitials: currentUser.initials,\n          speakerColor: '#3b82f6'\n        });\n      }\n    }\n  };\n\n  const speakerColors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899'];\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"live-transcription-page\">\n      <Sidebar \n        connectionStatus={{\n          isConnected: connectionState === 'connected',\n          activeUsers\n        }}\n      />\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <Header user={currentUser} activeUsers={activeUsers} />\n        \n        <div className=\"h-[calc(100vh-64px)] flex\">\n          {/* Main Transcription Area */}\n          <div className=\"flex-1 flex flex-col\">\n            {/* Meeting Controls */}\n            <div className=\"p-4 border-b bg-background\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-3 h-3 rounded-full ${\n                      connectionState === 'connected' ? 'bg-green-500' : 'bg-red-500'\n                    }`} />\n                    <span className=\"text-sm font-medium\">\n                      {connectionState === 'connected' ? 'Connected' : 'Disconnected'}\n                    </span>\n                  </div>\n                  \n                  {meetingStatus.status !== 'idle' && (\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        <span data-testid=\"meeting-duration\">\n                          {formatDuration(meetingStatus.duration)}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Users className=\"w-4 h-4\" />\n                        <span data-testid=\"speaker-count\">\n                          {meetingStatus.speakerCount} speakers\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  {meetingStatus.status === 'idle' ? (\n                    <Button \n                      onClick={handleStartMeeting}\n                      disabled={connectionState !== 'connected'}\n                      data-testid=\"button-start-meeting\"\n                    >\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      Start Meeting\n                    </Button>\n                  ) : (\n                    <>\n                      <Button\n                        variant=\"outline\"\n                        onClick={handleTogglePause}\n                        data-testid=\"button-toggle-pause\"\n                      >\n                        {meetingStatus.status === 'active' ? (\n                          <><Pause className=\"w-4 h-4 mr-2\" />Pause</>\n                        ) : (\n                          <><Play className=\"w-4 h-4 mr-2\" />Resume</>\n                        )}\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        onClick={handleStopMeeting}\n                        data-testid=\"button-stop-meeting\"\n                      >\n                        <Square className=\"w-4 h-4 mr-2\" />\n                        Stop\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              {/* Audio Controls */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleToggleMicrophone}\n                    className={isMicrophoneEnabled ? 'bg-green-100 border-green-300' : ''}\n                    data-testid=\"button-toggle-microphone\"\n                  >\n                    {isMicrophoneEnabled ? (\n                      <><Mic className=\"w-4 h-4 mr-2\" />Mic On</>\n                    ) : (\n                      <><MicOff className=\"w-4 h-4 mr-2\" />Mic Off</>\n                    )}\n                  </Button>\n\n                  {isMicrophoneEnabled && (\n                    <div className=\"flex items-center gap-2\">\n                      <Volume2 className=\"w-4 h-4 text-muted-foreground\" />\n                      <Progress value={audioLevel} className=\"w-20\" />\n                    </div>\n                  )}\n\n                  <Badge variant={isRecording ? \"default\" : \"secondary\"} data-testid=\"recording-status\">\n                    {isRecording ? '● Recording' : '○ Not Recording'}\n                  </Badge>\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleTestTranscription}\n                  disabled={meetingStatus.status === 'idle'}\n                  data-testid=\"button-test-transcription\"\n                >\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Test Transcription\n                </Button>\n              </div>\n            </div>\n\n            {/* Transcription Display */}\n            <div className=\"flex-1 overflow-hidden\">\n              <div \n                ref={scrollRef}\n                className=\"h-full overflow-y-auto p-4 space-y-3\"\n                data-testid=\"transcription-display\"\n              >\n                {transcriptions.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full text-center\">\n                    <div className=\"text-muted-foreground\">\n                      <MessageSquare className=\"w-12 h-12 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium mb-2\">Ready for Transcription</h3>\n                      <p className=\"text-sm\">\n                        {meetingStatus.status === 'idle' \n                          ? 'Start a meeting to begin live transcription'\n                          : 'Speak to see your words appear here in real-time'\n                        }\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  transcriptions.map((transcription, index) => (\n                    <div key={index} className=\"flex gap-3 group\" data-testid={`transcription-${index}`}>\n                      <div \n                        className=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium flex-shrink-0\"\n                        style={{ backgroundColor: transcription.speakerColor }}\n                      >\n                        {transcription.speakerInitials}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <span className=\"font-medium text-sm\" data-testid={`speaker-name-${index}`}>\n                            {transcription.speakerName}\n                          </span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {transcription.timestamp.toLocaleTimeString()}\n                          </span>\n                          {transcription.isStreaming && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Speaking...\n                            </Badge>\n                          )}\n                        </div>\n                        <p \n                          className={`text-sm ${transcription.isStreaming ? 'text-muted-foreground italic' : 'text-foreground'}`}\n                          data-testid={`transcription-content-${index}`}\n                        >\n                          {transcription.content}\n                          {transcription.isStreaming && <span className=\"animate-pulse\">|</span>}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Right Sidebar - Action Items & Chat */}\n          <div className=\"w-80 border-l bg-muted/30 flex flex-col\">\n            {/* Action Items */}\n            <div className=\"flex-1 p-4\">\n              <h3 className=\"font-semibold mb-3 flex items-center gap-2\">\n                <CheckSquare className=\"w-4 h-4\" />\n                Action Items ({actionItems.length})\n              </h3>\n              <div className=\"space-y-2 mb-6\" data-testid=\"action-items-list\">\n                {actionItems.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Action items will appear here automatically as they're detected in the conversation.\n                  </p>\n                ) : (\n                  actionItems.map((item, index) => (\n                    <Card key={index} className=\"p-3\">\n                      <p className=\"text-sm font-medium\" data-testid={`action-item-${index}`}>\n                        {item.title}\n                      </p>\n                      {item.assignedTo && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Assigned to: {item.assignedTo}\n                        </p>\n                      )}\n                    </Card>\n                  ))\n                )}\n              </div>\n\n              {/* Real-time Insights */}\n              <h3 className=\"font-semibold mb-3 flex items-center gap-2\">\n                <FileText className=\"w-4 h-4\" />\n                Live Insights\n              </h3>\n              <div className=\"space-y-2\" data-testid=\"live-insights\">\n                {Object.keys(insights).length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">\n                    AI insights will be generated as the meeting progresses.\n                  </p>\n                ) : (\n                  <Card className=\"p-3\">\n                    <p className=\"text-sm\">{insights.summary}</p>\n                  </Card>\n                )}\n              </div>\n            </div>\n\n            {/* Chat */}\n            <div className=\"border-t p-4\">\n              <h3 className=\"font-semibold mb-3 flex items-center gap-2\">\n                <MessageSquare className=\"w-4 h-4\" />\n                Meeting Chat\n              </h3>\n              \n              <div className=\"space-y-2 mb-3 max-h-32 overflow-y-auto\" data-testid=\"chat-messages\">\n                {chatMessages.map((message, index) => (\n                  <div key={index} className=\"text-sm\">\n                    <span className=\"font-medium\">{message.sender}:</span>\n                    <span className=\"ml-2\">{message.content}</span>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Type a message...\"\n                  value={newChatMessage}\n                  onChange={(e) => setNewChatMessage(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendChatMessage()}\n                  disabled={meetingStatus.status === 'idle'}\n                  data-testid=\"input-chat-message\"\n                />\n                <Button \n                  size=\"sm\"\n                  onClick={handleSendChatMessage}\n                  disabled={!newChatMessage.trim() || meetingStatus.status === 'idle'}\n                  data-testid=\"button-send-chat\"\n                >\n                  Send\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":19586}},"version":1}